"""
A single cell ATAC-seq analysis pipeline.
"""

configfile: "config.yaml"

outprefix = config["outprefix"]

import yaml
import sys
import os

from strap.scATAC_utility import get_fastqlist, ENV_PATH, SCRIPT_PATH, RSCRIPT_PATH

rule all:
    input:
        qcmap = "Result/QC/" + outprefix + "_map.pdf",
        qcfrag = "Result/QC/" + outprefix + "_frag.pdf",
        qcfrip = "Result/QC/" + outprefix + "_frip.pdf",
        seuratobj = "Result/Analysis/" + outprefix + "_SeuratObj.rds",
        count = "Result/Analysis/" + outprefix + "_binary.txt",
        genescore = "Result/Analysis/" + outprefix + "_genescore.txt",
        specifictf = "Result/Analysis/SpetificTF",
        mergeobject = "Result/Analysis/" + outprefix + "_combined_SeuratObj.rds"
        # tfscore = "Result/Analysis/" + outprefix + "_tfscore.txt"

if config["platform"] == "microfluidic":
    rule bwa_map:
        input:
            fasta = config["genome"]["fasta"],
            fastq1 = config["fastqdir"] + "/{fastqid}_1.fastq",
            fastq2 = config["fastqdir"] + "/{fastqid}_2.fastq"
        output:
            bam = "Result/BWA/{fastqid}.sortedByPos.bam"
        threads:
            config["cores"]
        shell:
            "bwa mem -t {threads} {input.fasta} {input.fastq1} {input.fastq2} "
            "| samtools view --threads {threads} -b "
            "| samtools sort --threads {threads} -o {output.bam}"

    rule picard_rmdp:
        input:
            bam = "Result/BWA/{fastqid}.sortedByPos.bam"
        output:
            bam = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam",
            metric = "Result/BWA/{fastqid}.sortedByPos.rmdp.txt"
        shell:
            "picard MarkDuplicates INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.metric};"
            "rm {input.bam}"

    rule bam_index:
        input:
            bam = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam"
        output:
            bai = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam.bai"
        shell:
            "samtools index {input.bam}"

    rule bam_merge:
        input:
            bam = expand("Result/BWA/{fastqid}.sortedByPos.rmdp.bam", fastqid = get_fastqlist(config["fastqdir"])),
            bai = expand("Result/BWA/{fastqid}.sortedByPos.rmdp.bam.bai", fastqid = get_fastqlist(config["fastqdir"]))
        threads:
            config["cores"]
        output:
            bam = "Result/BWA/" + outprefix + ".merged.sortedByPos.rmdp.bam"
        shell:
            "ls Result/BWA/*.sortedByPos.rmdp.bam > Result/BWA/bamlist.txt;"
            "samtools merge --threads {threads} {output.bam} Result/BWA/*.sortedByPos.rmdp.bam"

    rule short_fragment:
        input:
            bam = "Result/BWA/" + outprefix + ".merged.sortedByPos.rmdp.bam"
        output:
            fragbed = "Result/QC/" + outprefix + "_frag.bed",
            shortsam = "Result/Analysis/" + outprefix + ".merged.sortedByPos.rmdp.50bp.sam"
        shell:
            "samtools view {input.bam} | awk '{{if ($9>0) print $9}}' > {output.fragbed};"
            "samtools view {input.bam} | awk -F'\\t' 'function abs(x){{return ((x < 0.0) ? -x : x)}} {{if (abs($9)<=50) print}}' > {output.shortsam}"

    rule scatac_qcstat:
        input:
            bam = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam",
            promoter = SCRIPT_PATH + "/annotations/" + config["species"] + "_promoter.bed",
            chrM = SCRIPT_PATH + "/annotations/" + config["species"] + "_chrM.bed"
        output:
            log = "Result/Log/bamLog/{fastqid}.mapping.log",
            bed = "Result/BWA/{fastqid}.sortedByPos.rmdp.bed",
        shell:
            "samtools flagstat {input.bam} > {output.log};"
            "bamToBed -i {input.bam} > {output.bed};"
            "intersectBed -wa -a {output.bed} -b {input.chrM} -u | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.promoter} -u | wc -l >> {output.log}"

    rule scatac_qcplot:
        input:
            log = expand("Result/Log/bamLog/{fastqid}.mapping.log", fastqid = get_fastqlist(config["fastqdir"])),
            fragbed = "Result/QC/" + outprefix + "_frag.bed"
        output:
            stat = "Result/QC/singlecell.txt",
            qcfrag = "Result/QC/" + outprefix + "_frag.pdf",
            qcmap = "Result/QC/" + outprefix + "_map.pdf",
            qcfrip = "Result/QC/" + outprefix + "_frip.pdf",
            validbarcode = "Result/QC/" + outprefix + "_barcodes.txt",
        params:
            log = "Result/Log/bamLog/",
            platform = config["platform"],
            outdir = "Result/QC",
            outpre = outprefix,
            stat = "singlecell.txt",
            fragbed = outprefix + "_frag.bed",
            rscriptpath = RSCRIPT_PATH
        shell:
            "python " + SCRIPT_PATH + "/scATAC_microfluidic_qc.py {params.log} {output.stat};"
            "Rscript " + RSCRIPT_PATH + "/scATACseq_qc.R {params.stat} {params.fragbed} {params.platform} {params.outpre} {params.outdir} {params.rscriptpath}"

    rule all_peakcall:
        input:
            bam = "Result/BWA/" + outprefix + ".merged.sortedByPos.rmdp.bam"
        output:
            bed = "Result/Analysis/" + outprefix + "_all_peaks.narrowPeak"
        params:
            name = "Result/Analysis/" + outprefix + "_all"
        log:
            "Result/Log/" + outprefix + "_macs2_allpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.bam}"
    
    rule short_peakcall:
        input:
            sam = "Result/Analysis/" + outprefix + ".merged.sortedByPos.rmdp.50bp.sam"            
        output:
            bed = "Result/Analysis/" + outprefix + "_50bp_peaks.narrowPeak"
        params:
            name = "Result/Analysis/" + outprefix + "_50bp"
        log:
            "Result/Log/" + outprefix + "_macs2_shortpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.sam}"
    
    if config["custompeaks"]:
        rule merge_peak:
            input:
                allpeak = "Result/Analysis/" + outprefix + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + outprefix + "_50bp_peaks.narrowPeak",
                custompeak = config["custompeaksloc"]
            output:
                catpeaksort = "Result/Analysis/" + outprefix + "_cat_peaks.bed",
                finalpeak = "Result/Analysis/" + outprefix + "_final_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} {input.custompeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {output.catpeaksort};"
                "mergeBed -i {output.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak} "
    else:
        rule merge_peak:
            input:
                allpeak = "Result/Analysis/" + outprefix + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + outrefix + "_50bp_peaks.narrowPeak"
            output:
                catpeaksort = "Result/Analysis/" + outprefix + "_cat_peaks.bed",
                finalpeak = "Result/Analysis/" + outprefix + "_final_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {output.catpeaksort};"
                "mergeBed -i {input.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.mergepeak} "
 
    rule count_peak:
        input:
            finalpeak = "Result/Analysis/" + outprefix + "_final_peaks.bed",
            validbarcode = "Result/QC/" + outprefix + "_barcodes.txt"
        output:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        threads:
            config["cores"]
        params:
            bamdir = "Result/BWA"
        shell:
            "python " + SCRIPT_PATH + "/scATAC_microfluidic_count.py {input.finalpeak} {input.validbarcode} {params.bamdir} {output.count} {threads}"

    rule scatac_clustering:
        input:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        output:
            seuratobj = "Result/Analysis/" + outprefix + "_SeuratObj.rds",
            specificpeak = "Result/Analysis/" + outprefix + "_ClusterSpecificPeaks.txt"
        params:
            outdir = "Result/Analysis",
            outpre = outprefix,
            species = config["species"],
            count = outprefix + "_binary.txt",
            rscriptpath = RSCRIPT_PATH
        shell:
            "Rscript " + RSCRIPT_PATH + "/scATACseq_pipe.R {params.count} {params.species} {params.outpre} {params.outdir} {params.rscriptpath}"

    rule scatac_genescore:
        input:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        output:
            genescore = "Result/Analysis/" + outprefix + "_genescore.txt"
        params:
            genedistance = config["genedistance"],
            genebed = SCRIPT_PATH + "/annotations/" + config["species"] +"_ensembl.bed",
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_genescore.py {input.count} {output.genescore} {params.genedistance} {params.genebed} {threads}"

    rule scatac_tfscore:
        input:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        output:
            tfscore = "Result/Analysis/" + outprefix + "_tfscore.txt"
        params:
            gcbed = SCRIPT_PATH + "/annotations/" + config["species"] + "_window_1kb.bed",
            tfindex = SCRIPT_PATH + "/annotations/" + config["species"] + "_tf_peak_loct_1kb.json",
            tfpercent = config["tfpercent"],
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_TFscore.py {input.count} {output.tfscore} {params.gcbed} {params.tfindex} {params.tfpercent} {threads}"

    rule scatac_giggleTF:
        input:
            specificpeak = "Result/Analysis/" + outprefix + "_ClusterSpecificPeaks.txt"
        output:
            specifictf = directory("Result/Analysis/SpetificTF")
        params:
            species = config["species"]
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_specificTF.py -a {params.species} -p {input.specificpeak} -o {output.specifictf} -s -"

else:
    if config["platform"] == "sci-ATAC-seq":
        rule barcode_preprocess:
            input:
                fastq1 = config["fastqdir"] + "/" + config["fastqprefix"] + "_1.fastq",
                fastq2 = config["fastqdir"] + "/" + config["fastqprefix"] + "_2.fastq"
            output:
                R1 = config["fastqdir"] + "/" + config["fastqprefix"] + "_S1_L001_R1_001.fastq",
                R2 = config["fastqdir"] + "/" + config["fastqprefix"] + "_S1_L001_R2_001.fastq",
                R3 = config["fastqdir"] + "/" + config["fastqprefix"] + "_S1_L001_R3_001.fastq"
            shell:
                "mv {input.fastq1} {output.R1};"
                """awk -F: '{{if(NR%4==1){{print; split($2,a,"-"); print a[length(a)]}} if(NR%4==3) print; if(NR%4==0) print substr($0,1,length(a[length(a)]))}}' {output.R1} > {output.R2};"""
                "mv {input.fastq2} {output.R3};"

    rule cellranger:
        input:
            R1 = config["fastqdir"] + "/" + config["fastqprefix"] + "_S1_L001_R1_001.fastq",
            R2 = config["fastqdir"] + "/" + config["fastqprefix"] + "_S1_L001_R2_001.fastq",
            R3 = config["fastqdir"] + "/" + config["fastqprefix"] + "_S1_L001_R3_001.fastq",
            fastqs = config["fastqdir"],
            genome = config["genome"]["cellranger"]
        output:
            stat = "Result/cellranger/" + outprefix + "/outs/singlecell.csv",
            bam = "Result/cellranger/" + outprefix + "/outs/possorted_bam.bam",
            frag = "Result/cellranger/" + outprefix + "/outs/fragments.tsv.gz"
        params:
            fastqprefix = config["fastqprefix"],
            outpre = outprefix,
            sourceoutdir = outprefix + "/",
            destoutdir = "Result/cellranger/"
        threads:
            config["cores"]
        log:
            "Result/Log/" + outprefix + "_cellranger.log"
        shell:
            "cellranger-atac count --id={params.outpre} --fastqs={input.fastqs} "
            "--reference={input.genome} --sample={params.fastqprefix} --localcores={threads} "
            ">> {log};"
            "cp -fr {params.sourceoutdir} {params.destoutdir};"
            "rm -r {params.sourceoutdir};"
   
    rule short_fragment:
        input:
            bam = "Result/cellranger/" + outprefix + "/outs/possorted_bam.bam"
        output:
            fragbed = "Result/QC/" + outprefix + "_frag.bed",
            shortsam = "Result/Analysis/" + outprefix + "_50bp.sam"
        shell:
            "samtools view {input.bam} | awk '{{if ($9>0) print $9}}' > {output.fragbed};"
            "samtools view {input.bam} | awk -F'\\t' 'function abs(x){{return ((x < 0.0) ? -x : x)}} {{if (abs($9)<=50) print}}' > {output.shortsam}"

    rule scatac_qcplot:
        input:
            stat = "Result/cellranger/" + outprefix + "/outs/singlecell.csv",
            fragbed = "Result/QC/" + outprefix + "_frag.bed"
        output:
            qcfrag = "Result/QC/" + outprefix + "_frag.pdf",
            qcmap = "Result/QC/" + outprefix + "_map.pdf",
            qcfrip = "Result/QC/" + outprefix + "_frip.pdf",
            validbarcode = "Result/QC/" + outprefix + "_barcodes.txt",
        params:
            platform = config["platform"],
            outdir = "Result/QC",
            outpre = outprefix,
            stat = "../cellranger/" + outprefix + "/outs/singlecell.csv",
            fragbed = outprefix + "_frag.bed",
            rscriptpath = RSCRIPT_PATH
        shell:
            "Rscript " + RSCRIPT_PATH + "/scATACseq_qc.R {params.stat} {params.fragbed} {params.platform} {params.outpre} {params.outdir} {params.rscriptpath}"

    rule all_peakcall:
        input:
            bam = "Result/cellranger/" + outprefix + "/outs/possorted_bam.bam"
        output:
            bed = "Result/Analysis/" + outprefix + "_all_peaks.narrowPeak"
        params:
            name = "Result/Analysis/" + outprefix + "_all"
        log:
            "Result/Log/" + outprefix + "_macs2_allpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.bam}"
    
    rule short_peakcall:
        input:
            sam = "Result/Analysis/" + outprefix + "_50bp.sam"            
        output:
            bed = "Result/Analysis/" + outprefix + "_50bp_peaks.narrowPeak"
        params:
            name = "Result/Analysis/" + outprefix + "_50bp"
        log:
            "Result/Log/" + outprefix + "_macs2_shortpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.sam}"
    
    if config["custompeaks"]:
        rule merge_peak:
            input:
                allpeak = "Result/Analysis/" + outprefix + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + outprefix + "_50bp_peaks.narrowPeak",
                custompeak = config["custompeaksloc"]
            output:
                catpeaksort = "Result/Analysis/" + outprefix + "_cat_peaks.bed",
                finalpeak = "Result/Analysis/" + outprefix + "_final_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} {input.custompeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {output.catpeaksort};"
                "mergeBed -i {output.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak} "

    else:
        rule merge_peak:
            input:
                allpeak = "Result/Analysis/" + outprefix + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + outrefix + "_50bp_peaks.narrowPeak"
            output:
                catpeaksort = "Result/Analysis/" + outprefix + "_cat_peaks.bed",
                finalpeak = "Result/Analysis/" + outprefix + "_final_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {output.catpeaksort};"
                "mergeBed -i {input.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.mergepeak} "
 
    rule count_peak:
        input:
            finalpeak = "Result/Analysis/" + outprefix + "_final_peaks.bed",
            validbarcode = "Result/QC/" + outprefix + "_barcodes.txt",
            frag = "Result/cellranger/" + outprefix + "/outs/fragments.tsv.gz"
        output:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        params:
            frag = "Result/cellranger/" + outprefix + "/outs/fragments.tsv"
        threads:
            config["cores"]
        shell:
            "gzip -d {input.frag};"
            "python " + SCRIPT_PATH + "/scATAC_cellranger_count.py {input.finalpeak} {input.validbarcode} {params.frag} {output.count} {threads}"

    rule scatac_clustering:
        input:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        output:
            seuratobj = "Result/Analysis/" + outprefix + "_SeuratObj.rds",
            specificpeak = "Result/Analysis/" + outprefix + "_ClusterSpecificPeaks.txt"
        params:
            outdir = "Result/Analysis",
            genescore = outprefix + "_genescore.txt",
            outpre = outprefix,
            species = config["species"],
            count = outprefix + "_binary.txt",
            rscriptpath = RSCRIPT_PATH
        shell:
            "Rscript " + RSCRIPT_PATH + "/scATACseq_pipe.R {params.count} {params.genescore} {params.species} {params.outpre} {params.outdir} {params.rscriptpath}"

    rule scatac_genescore:
        input:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        output:
            genescore = "Result/Analysis/" + outprefix + "_genescore.txt"
        params:
            genedistance = config["genedistance"],
            genebed = SCRIPT_PATH + "/annotations/" + config["species"] +"_ensembl.bed",
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_genescore.py {input.count} {output.genescore} {params.genedistance} {params.genebed} {threads}"

    rule scatac_tfscore:
        input:
            count = "Result/Analysis/" + outprefix + "_binary.txt"
        output:
            tfscore = "Result/Analysis/" + outprefix + "_tfscore.txt"
        params:
            gcbed = SCRIPT_PATH + "/annotations/" + config["species"] + "_window_1kb.bed",
            tfindex = SCRIPT_PATH + "/annotations/" + config["species"] + "_tf_peak_loct_1kb.json",
            tfpercent = config["tfpercent"],
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_TFscore.py {input.count} {output.tfscore} {params.gcbed} {params.tfindex} {params.tfpercent} {threads}"

    rule scatac_giggleTF:
        input:
            specificpeak = "Result/Analysis/" + outprefix + "_ClusterSpecificPeaks.txt"
        output:
            specifictf = directory("Result/Analysis/SpetificTF")
        params:
            species = config["species"]
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_specificTF.py -a {params.species} -p {input.specificpeak} -o {output.specifictf} -s -"

    rule scatac_merge:
        input:
            genescore = "Result/Analysis/" + outprefix + "_genescore.txt",
            rnaseuratobj = config["rnaobject"]
        output:
            mergeobject = "Result/Analysis/" + outprefix + "_combined_SeuratObj.rds"
        params:
            genescore = outprefix + "_genescore.txt",
            outpre = outprefix,
            outdir = "Result/Analysis",
            rscriptpath = RSCRIPT_PATH
        shell:
            "Rscript " + RSCRIPT_PATH + "/scATACseq_integrate.R {params.genescore} {input.rnaseuratobj} {params.outpre} {params.outdir} {params.rscriptpath}"

            