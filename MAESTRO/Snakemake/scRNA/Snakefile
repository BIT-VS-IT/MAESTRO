"""
A single cell RNA-seq analysis pipeline.
"""

configfile: "config.yaml"

import yaml
import sys
import os

from MAESTRO.scRNA_utility import get_fastqlist, SCRIPT_PATH, RSCRIPT_PATH


rule all:
    input:
        summaryreport = "Result/Summary/" + config["outprefix"] + "_scRNA_report.html"


if config["platform"] == "10x-genomics":
    rule scrna_cellranger:
        input:
            fastqs = config["fastqdir"],
            genome = config["genome"]["cellranger"]
        output:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam.bam",
            rawh5 = "Result/Cellranger/" + config["outprefix"] + "/outs/raw_feature_bc_matrix.h5"
        params:
            outpre = config["outprefix"],
            sourceoutdir = config["outprefix"],
            destoutdir = "Result/Cellranger/",
            fastqprefix = config["fastqprefix"],
        log:
            "Result/Log/" + config["outprefix"] + "_cellranger.log"
        threads:
            config["cores"]
        shell:
            "cellranger count --id={params.outpre} --fastqs={input.fastqs} "
            "--transcriptome={input.genome} --sample={params.fastqprefix} --localcores={threads} "
            ">> {log};"
            "cp -fr {params.sourceoutdir} {params.destoutdir};"
            "rm -r {params.sourceoutdir};"

    rule scrna_qc:
        input:
            rawh5 = "Result/Cellranger/" + config["outprefix"] + "/outs/raw_feature_bc_matrix.h5"
        output:
            countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt",
            filtermatrix = "Result/QC/" + config["outprefix"] + "_filtered_feature_bc_matrix/matrix.mtx.gz"
        params:
            platform = config["platform"],
            outpre = config["outprefix"],
            outdir = "Result/QC"
        shell:
            "python " + SCRIPT_PATH + "/scRNA_qc.py {input.rawh5} {params.platform} {params.outpre} {params.outdir}"

    rule scrna_samplebam:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam.bam",
        output:
            bamsample = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam_sample.bam"
        threads:
            config["cores"]
        shell:
            "samtools view -@ {threads} -s 0.1 -b -o {output.bamsample} {input.bam};"
            "samtools index -@ {threads} {output.bamsample}"

    rule scrna_rseqc_readqual:
        input:
            bamsample = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam_sample.bam"
        output:
            qual = "Result/QC/" + config["outprefix"] + ".qual.r"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_quality.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_nvc:
        input:
            bamsample = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam_sample.bam"
        output:
            nvc = "Result/QC/" + config["outprefix"] + ".NVC.xls"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_NVC.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_gc:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam.bam"
        output:
            gc = "Result/QC/" + config["outprefix"] + ".GC.xls"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_GC.py -i {input.bam} -o {params.outdirpre}"

    rule scrna_rseqc_bamstat:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam.bam"
        output:
            stat = "Result/QC/" + config["outprefix"] + "_bam_stat.txt"
        shell:
            "bam_stat.py -i {input.bam} > {output.stat};"

    rule scrna_rseqc_distr:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam.bam",
            genome = SCRIPT_PATH + "/annotations/" + config["species"] + "_RefSeq.bed",
        output:
            distr = "Result/QC/" + config["outprefix"] + "_read_distribution.txt"
        shell:
            "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr}"

    rule scrna_rseqc_genecov:
        input:
            bamsample = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_genome_bam_sample.bam",
            hkgene = SCRIPT_PATH + "/annotations/" + config["species"] + "_HouseKeepingGenes.bed",
        output:
            genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "geneBody_coverage.py -r {input.hkgene} -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_plot:
        input:
            qual = "Result/QC/" + config["outprefix"] + ".qual.r",
            nvc = "Result/QC/" + config["outprefix"] + ".NVC.xls",
            gc = "Result/QC/" + config["outprefix"] + ".GC.xls",
            genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt",
            countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt"
        output:
            qualplot = "Result/QC/" + config["outprefix"] + "_scRNA_read_quality.png",
            nvcplot = "Result/QC/" + config["outprefix"] + "_scRNA_NVC.png",
            gcplot = "Result/QC/" + config["outprefix"] + "_scRNA_GCcontent.png",
            genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
            rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
        params:
            outpre = config["outprefix"],
            outdir = "Result/QC",
            qual = config["outprefix"] + ".qual.r",
            nvc = config["outprefix"] + ".NVC.xls",
            gc = config["outprefix"] + ".GC.xls",
            genecov = config["outprefix"] + ".geneBodyCoverage.txt",
            countgene = config["outprefix"] + "_count_gene_stat.txt"
        shell:
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R {params.qual} {params.nvc} {params.gc} {params.genecov} {params.countgene} {params.outpre} {params.outdir}"

    rule scrna_analysis:
        input:
            expression = "Result/QC/" + config["outprefix"] + "_filtered_feature_bc_matrix/matrix.mtx.gz"
        output:
            directory("Result/Analysis")
        params:
            expression = "../QC/" + config["outprefix"] + "_filtered_feature_bc_matrix",
            species = config["species"],
            platform = config["platform"],
            outpre = config["outprefix"],
            rabitlib = config["rabitlib"]
        shell:
            "mkdir " + "Result/Analysis;"
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.outpre} {params.rabitlib} {output}"

if config["platform"] == "Dropseq":
    if config["barcode"]["start"]:
        rule scrna_rmlinker:
            input:
                barcode = config["fastqdir"] + "/" + config["fastq"]["barcode"] + ".fastq"
            output:
                config["fastqdir"] + "/" + config["fastq"]["barcode"] + "_nolinker.fastq"
            params:
                start = config["barcode"]["start"],
                end = config["barcode"]["end"]
            shell:
                "python " + SCRIPT_PATH + "/scRNA_rmLinker.py -f {input.barcode} -s {params.start} -e {params.end} -o {output}"
    else:
        rule scrna_rename:
            input:
                barcode = config["fastqdir"] + "/" + config["fastq"]["barcode"] + ".fastq"
            output:
                config["fastqdir"] + "/" + config["fastq"]["barcode"] + "_nolinker.fastq"
            shell:
                "mv {input.barcode} {output}"

    rule scrna_drseq:
        input:
            mapindex = config["genome"]["mapindex"],
            anno = SCRIPT_PATH + "/annotations/" + config["species"] + "_refgenes.txt",
            barcode = config["fastqdir"] + "/" + config["fastq"]["barcode"] + "_nolinker.fastq",
            transcript = config["fastqdir"] + "/" + config["fastq"]["transcript"] + ".fastq"
        output:
            expression = "Result/Drseq/" + config["outprefix"] + "/expmatrix/" + config["outprefix"] + "_expmat.txt",
            sam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + ".sam"
        params:
            umilength = config["barcode"]["umilength"],
            barcodelength = config["barcode"]["barcodelength"],
            outpre = config["outprefix"]
        threads:
            config["cores"]
        shell:
            "cd Result/Drseq/;"
            "Drseq.py simple -b {input.barcode} -r {input.transcript} "
            "--cellbarcodelength {params.barcodelength} --umilength {params.umilength} -g {input.anno} --maptool STAR "
            "--mapindex {input.mapindex} --thread {threads} --checkmem 0 -n {params.outpre} -f;"
            "cd ../../;"

    rule scrna_bamindex:
        input:
            sam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + ".sam"
        output:
            bam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam",
            bai = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam.bai"
        threads:
            config["cores"]
        shell:
            "samtools view -b --threads {threads} {input.sam} | samtools sort --threads {threads} > {output.bam};"
            "samtools index -@ {threads} {output.bam}"

    rule scrna_qc:
        input:
            expression = "Result/Drseq/" + config["outprefix"] + "/expmatrix/" + config["outprefix"] + "_expmat.txt",
        output:
            countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt",
            filtermatrix = "Result/QC/" + config["outprefix"] + "_filtered_gene_count_matrix.txt"
        params:
            platform = config["platform"],
            outpre = config["outprefix"],
            outdir = "Result/QC"
        shell:
            "python " + SCRIPT_PATH + "/scRNA_qc.py {input.expression} {params.platform} {params.outpre} {params.outdir}"

    rule scrna_samplebam:
        input:
            bam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam",
        output:
            bamsample = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted_sample.bam",
        threads:
            config["cores"]
        shell:
            "samtools view -@ {threads} -s 0.1 -b -o {output.bamsample} {input.bam};"
            "samtools index -@ {threads} {output.bamsample}"

    rule scrna_rseqc_readqual:
        input:
            bamsample = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted_sample.bam",
        output:
            qual = "Result/QC/" + config["outprefix"] + ".qual.r"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_quality.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_nvc:
        input:
            bamsample = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted_sample.bam",
        output:
            nvc = "Result/QC/" + config["outprefix"] + ".NVC.xls"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_NVC.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_gc:
        input:
            bam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam",
            bai = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam.bai",
        output:
            gc = "Result/QC/" + config["outprefix"] + ".GC.xls"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_GC.py -i {input.bam} -o {params.outdirpre}"

    rule scrna_rseqc_bamstat:
        input:
            bam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam",
            bai = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam.bai",
        output:
            stat = "Result/QC/" + config["outprefix"] + "_bam_stat.txt"
        shell:
            "bam_stat.py -i {input.bam} > {output.stat};"

    rule scrna_rseqc_distr:
        input:
            bam = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam",
            bai = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted.bam.bai",
            genome = SCRIPT_PATH + "/annotations/" + config["species"] + "_RefSeq.bed",
        output:
            distr = "Result/QC/" + config["outprefix"] + "_read_distribution.txt"
        shell:
            "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr}"

    rule scrna_rseqc_genecov:
        input:
            bamsample = "Result/Drseq/" + config["outprefix"] + "/mapping/" + config["outprefix"] + "_possorted_sample.bam",
            hkgene = SCRIPT_PATH + "/annotations/" + config["species"] + "_HouseKeepingGenes.bed",
        output:
            genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "geneBody_coverage.py -r {input.hkgene} -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_plot:
        input:
            qual = "Result/QC/" + config["outprefix"] + ".qual.r",
            nvc = "Result/QC/" + config["outprefix"] + ".NVC.xls",
            gc = "Result/QC/" + config["outprefix"] + ".GC.xls",
            genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt",
            countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt"
        output:
            qualplot = "Result/QC/" + config["outprefix"] + "_scRNA_read_quality.png",
            nvcplot = "Result/QC/" + config["outprefix"] + "_scRNA_NVC.png",
            gcplot = "Result/QC/" + config["outprefix"] + "_scRNA_GCcontent.png",
            genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
            rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
        params:
            outpre = config["outprefix"],
            outdir = "Result/QC",
            qual = config["outprefix"] + ".qual.r",
            nvc = config["outprefix"] + ".NVC.xls",
            gc = config["outprefix"] + ".GC.xls",
            genecov = config["outprefix"] + ".geneBodyCoverage.txt",
            countgene = config["outprefix"] + "_count_gene_stat.txt"
        shell:
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R {params.qual} {params.nvc} {params.gc} {params.genecov} {params.countgene} {params.outpre} {params.outdir}"
    
    rule scrna_analysis:
        input:
            expression = "Result/QC/" + config["outprefix"] + "_filtered_gene_count_matrix.txt"
        output:
            directory("Result/Analysis")
        params:
            expression = "../QC/" + config["outprefix"] + "_filtered_gene_count_matrix.txt",
            species = config["species"],
            platform = config["platform"],
            outpre = config["outprefix"],
            rabitlib = config["rabitlib"]
        shell:
            "mkdir Result/Analysis;"
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.outpre} {params.rabitlib} {output}"


if config["platform"] == "Smartseq2":
    rule scrna_map:
        input:
            mapindex = config["genome"]["mapindex"],
            fastq1 = config["fastqdir"] + "/{fastqid}_1.fastq",
            fastq2 = config["fastqdir"] + "/{fastqid}_2.fastq"
        output:
            genomebam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam",
            transbam = "Result/Mapping/{fastqid}Aligned.toTranscriptome.out.bam"
        params:
            outdir = "Result/Mapping/{fastqid}"
        log:
            "Result/Log/{fastqid}_STAR_map.log"
        threads:
            config["cores"]
        shell:
            "STAR --genomeDir {input.mapindex} --runThreadN {threads} "
            "--outFilterMultimapNmax 500 --outFilterMismatchNmax 3 --quantMode TranscriptomeSAM "
            "--outFileNamePrefix {params.outdir} --outSAMtype BAM SortedByCoordinate "
            "--readFilesIn {input.fastq1} {input.fastq2} "
            ">> {log}"

    # rule bam_psort:
    #     input:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
    #     output:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByPos.out.bam"
    #     threads:
    #         config["cores"]
    #     shell:
    #         "samtools sort {input.bam} -o {output.bam} --threads {threads}"

    rule scrna_rsem_expre:
        input:
            transbam = "Result/Mapping/{fastqid}Aligned.toTranscriptome.out.bam"
        output:
            generesult = "Result/Mapping/{fastqid}.genes.results"
        params:
            reference = config["genome"]["rsem"],
            sample = "Result/Mapping/{fastqid}"
        log:
            "Result/Log/{fastqid}_RSEM_map.log"
        threads:
            config["cores"]
        shell:
            "rsem-calculate-expression -p {threads} --paired-end --bam "
            "--estimate-rspd --append-names {input.transbam} "
            "{params.reference} {params.sample} "
            ">> {log}"

    rule scrna_rsem_count:
        input:
            generesult = expand("Result/Mapping/{fastqid}.genes.results", fastqid = get_fastqlist(config["fastqdir"]))
        output:
            expression = "Result/Count/" + config["outprefix"] + "_gene_count_matrix.txt"
        shell:
            "rsem-generate-data-matrix {input.generesult} > {output.expression}"

    # rule scrna_assambly:
    #     input:
    #         genome = config["genome"]["gtf"],
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
    #     output:
    #         gtf = "Result/Count/{fastqid}/{fastqid}.gtf"
    #     log:
    #         "Result/Log/{fastqid}_StringTie_assembly.log"
    #     shell:
    #         "stringtie {input.bam} -e -B -p 8 "
    #         "-G {input.genome} -o {output.gtf} "
    #         ">> {log}"

    # rule scrna_gtf2matrix:
    #     input:
    #         gtfdir = expand("Result/Count/{fastqid}/{fastqid}.gtf", fastqid = get_fastqlist(config["fastqdir"]))
    #     params:
    #         gtfdir = "Result/Count/"
    #     output:
    #         gene = "Result/Count/" + config["outprefix"] + "_gene_count_matrix.csv",
    #         transcript = "Result/Count/" + config["outprefix"] + "_transcript_count_matrix.csv"
    #     shell:
    #         "prepDE.py -i {params.gtfdir} -g {output.gene} -t {output.transcript}"

    rule scrna_qc:
        input:
            expression = "Result/Count/" + config["outprefix"] + "_gene_count_matrix.txt",
        output:
            countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt",
            filtermatrix = "Result/QC/" + config["outprefix"] + "_filtered_gene_count_matrix.txt"
        params:
            platform = config["platform"],
            outpre = config["outprefix"],
            outdir = "Result/QC"
        shell:
            "python " + SCRIPT_PATH + "/scRNA_qc.py {input.expression} {params.platform} {params.outpre} {params.outdir}"

    # rule bam_rsort:
    #     input:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
    #     output:
    #         bam = "Result/Mapping/{fastqid}Aligned.sortedByReads.out.bam"
    #     threads:
    #         config["cores"]
    #     shell:
    #         "samtools sort -n {input.bam} -o {output.bam} --threads {threads}"

    rule scrna_bammerge:
        input:
            genomebam = expand("Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam", fastqid = get_fastqlist(config["fastqdir"]))
        output:
            bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
            bai = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam.bai",
            bamlist = "Result/Mapping/" + config["outprefix"] + "_bamlist.txt",
        params:
            bamprefix = "Result/Mapping/" + config["outprefix"] + "_bamlist_",
            subprefix = "Result/Mapping/" + config["outprefix"]
        threads:
            config["cores"]
        shell:
            "ls Result/Mapping/*Aligned.sortedByCoord.out.bam > {output.bamlist};"
            "split -1000 -d {output.bamlist} {params.bamprefix};"
            "for file in $(ls {params.bamprefix}*); do sub=${{file#{params.bamprefix}}};"
            "samtools merge --threads {threads} {params.subprefix}.${{sub}}.Aligned.sortedByCoord.out.bam -b ${{file}}; done;"
            "samtools merge --threads {threads} {output.bam} {params.subprefix}.*.Aligned.sortedByCoord.out.bam;"
            "rm {params.subprefix}.[0-9]*.Aligned.sortedByCoord.out.bam;"
            "samtools index -b -@ {threads} {output.bam}"
   
    # rule scrna_rseqc:
    #     input:
    #         bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
    #         bai = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam.bai",
    #         genome = SCRIPT_PATH + "/annotations/" + config["species"] + "_RefSeq.bed",
    #         hkgene = SCRIPT_PATH + "/annotations/" + config["species"] + "_HouseKeepingGenes.bed",
    #         countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt"
    #     output:
    #         stat = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
    #         distr = "Result/QC/" + config["outprefix"] + "_read_distribution.txt",
    #         genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt",
    #         genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
    #         rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
    #     params:
    #         # dup = "Result/QC/" + config["outprefix"] + "_dup",
    #         # qual = "Result/QC/" + config["outprefix"] + "_qual",
    #         outdirpre = "Result/QC/" + config["outprefix"],
    #         outpre = config["outprefix"],
    #         outdir = "Result/QC",
    #         stat = config["outprefix"] + "_bam_stat.txt",
    #         distr = config["outprefix"] + "_read_distribution.txt",
    #         genecov = config["outprefix"] + ".geneBodyCoverage.txt",
    #         countgene = config["outprefix"] + "_count_gene_stat.txt"
    #     shell:
    #         "bam_stat.py -i {input.bam} > {output.stat};"
    #         # "read_duplication.py -i {input.bam} -o {params.dup};"
    #         # "read_quality.py -i {input.bam} -o {params.qual};"
    #         "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr};"
    #         "geneBody_coverage.py -r {input.hkgene} -i {input.bam} -o {params.outdirpre};"
    #         "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R {params.genecov} {params.countgene} {params.outpre} {params.outdir}"

    rule scrna_samplebam:
        input:
            bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
        output:
            bamsample = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.sample.bam",
        threads:
            config["cores"]
        shell:
            "samtools view -@ {threads} -s 0.1 -b -o {output.bamsample} {input.bam};"
            "samtools index -@ {threads} {output.bamsample}"

    rule scrna_rseqc_readqual:
        input:
            bamsample = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.sample.bam",
        output:
            qual = "Result/QC/" + config["outprefix"] + ".qual.r"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_quality.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_nvc:
        input:
            bamsample = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.sample.bam",
        output:
            nvc = "Result/QC/" + config["outprefix"] + ".NVC.xls"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_NVC.py -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_gc:
        input:
            bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
            bai = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam.bai",
        output:
            gc = "Result/QC/" + config["outprefix"] + ".GC.xls"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "read_GC.py -i {input.bam} -o {params.outdirpre}"

    rule scrna_rseqc_bamstat:
        input:
            bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
            bai = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam.bai",
        output:
            stat = "Result/QC/" + config["outprefix"] + "_bam_stat.txt"
        shell:
            "bam_stat.py -i {input.bam} > {output.stat};"

    rule scrna_rseqc_distr:
        input:
            bam = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam",
            bai = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.bam.bai",
            genome = SCRIPT_PATH + "/annotations/" + config["species"] + "_RefSeq.bed",
        output:
            distr = "Result/QC/" + config["outprefix"] + "_read_distribution.txt"
        shell:
            "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr}"

    rule scrna_rseqc_genecov:
        input:
            bamsample = "Result/Mapping/" + config["outprefix"] + "Aligned.sortedByCoord.out.sample.bam",
            hkgene = SCRIPT_PATH + "/annotations/" + config["species"] + "_HouseKeepingGenes.bed",
        output:
            genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt"
        params:
            outdirpre = "Result/QC/" + config["outprefix"]
        shell:
            "geneBody_coverage.py -r {input.hkgene} -i {input.bamsample} -o {params.outdirpre}"

    rule scrna_rseqc_plot:
        input:
            qual = "Result/QC/" + config["outprefix"] + ".qual.r",
            nvc = "Result/QC/" + config["outprefix"] + ".NVC.xls",
            gc = "Result/QC/" + config["outprefix"] + ".GC.xls",
            genecov = "Result/QC/" + config["outprefix"] + ".geneBodyCoverage.txt",
            countgene = "Result/QC/" + config["outprefix"] + "_count_gene_stat.txt"
        output:
            qualplot = "Result/QC/" + config["outprefix"] + "_scRNA_read_quality.png",
            nvcplot = "Result/QC/" + config["outprefix"] + "_scRNA_NVC.png",
            gcplot = "Result/QC/" + config["outprefix"] + "_scRNA_GCcontent.png",
            genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
            rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
        params:
            outpre = config["outprefix"],
            outdir = "Result/QC",
            qual = config["outprefix"] + ".qual.r",
            nvc = config["outprefix"] + ".NVC.xls",
            gc = config["outprefix"] + ".GC.xls",
            genecov = config["outprefix"] + ".geneBodyCoverage.txt",
            countgene = config["outprefix"] + "_count_gene_stat.txt"
        shell:
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_qc.R {params.qual} {params.nvc} {params.gc} {params.genecov} {params.countgene} {params.outpre} {params.outdir}"

    rule scrna_analysis:
        input:
            expression = "Result/QC/" + config["outprefix"] + "_filtered_gene_count_matrix.txt"
        output:
            directory("Result/Analysis")
        params:
            expression = "../QC/" + config["outprefix"] + "_filtered_gene_count_matrix.txt",
            species = config["species"],
            platform = config["platform"],
            outpre = config["outprefix"],
            rabitlib = config["rabitlib"]
        shell:
            "mkdir Result/Analysis;"
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.outpre} {params.rabitlib} {output}"

rule scrna_report:
    input:
        analysis = "Result/Analysis",
        qcstat = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
        qualplot = "Result/QC/" + config["outprefix"] + "_scRNA_read_quality.png",
        nvcplot = "Result/QC/" + config["outprefix"] + "_scRNA_NVC.png",
        gcplot = "Result/QC/" + config["outprefix"] + "_scRNA_GCcontent.png",
        genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
        rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
    output:
        summaryreport = "Result/Summary/" + config["outprefix"] + "_scRNA_report.html",
        outdir = directory("Result/Summary/Plot/")
    params:
        outpre = config["outprefix"],
        fastqdir = config["fastqdir"],
        species = config["species"],
        platform = config["platform"],
        qualplot = "Result/QC/" + config["outprefix"] + "_scRNA_read_quality.png",
        nvcplot = "Result/QC/" + config["outprefix"] + "_scRNA_NVC.png",
        gcplot = "Result/QC/" + config["outprefix"] + "_scRNA_GCcontent.png",
        genecovplot = "Result/QC/" + config["outprefix"] + "_scRNA_genebody_cov.png",
        rnafilterplot = "Result/QC/" + config["outprefix"] + "_scRNA_cell_filtering.png",
        clusterplot = "Result/Analysis/" + config["outprefix"] + "_cluster.png",
        annotateplot = "Result/Analysis/" + config["outprefix"] + "_annotated.png",
    shell:
        "cp {params.genecovplot} {params.rnafilterplot} {params.clusterplot} {params.annotateplot} {output.outdir};"
        "python " + SCRIPT_PATH + "/scRNA_report.py {params.outpre} {params.fastqdir} {params.species} {params.platform}" 

        