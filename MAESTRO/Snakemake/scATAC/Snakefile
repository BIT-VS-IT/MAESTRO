"""
A single cell ATAC-seq analysis pipeline.
"""

configfile: "config.yaml"

import yaml
import sys
import os

from MAESTRO.scATAC_utility import get_fastqlist, ENV_PATH, SCRIPT_PATH, RSCRIPT_PATH

def qcplot_input(wildcards):
    checkpoint_output = checkpoints.scatac_samsplit.get(**wildcards).output[0]
    return expand("Result/Log/bamLog/{barcodeid}.mapping.log",
           barcodeid=glob_wildcards(os.path.join(checkpoint_output, "{barcodeid}.sam")).barcodeid)

rule all:
    input:
        summaryreport = "Result/Summary/" + config["outprefix"] + "_scATAC_report.html"
        # tfscore = "Result/Analysis/" + config["outprefix"] + "_tfscore.txt"

if config["platform"] == "microfluidic":
    rule scatac_map:
        input:
            fasta = config["genome"]["fasta"],
            fastq1 = config["fastqdir"] + "/{fastqid}_1.fastq",
            fastq2 = config["fastqdir"] + "/{fastqid}_2.fastq"
        output:
            bam = "Result/BWA/{fastqid}.sortedByPos.bam"
        threads:
            config["cores"]
        shell:
            "bwa mem -t {threads} {input.fasta} {input.fastq1} {input.fastq2} "
            "| samtools view --threads {threads} -b "
            "| samtools sort --threads {threads} -o {output.bam}"

    rule scatac_bamrmdp:
        input:
            bam = "Result/BWA/{fastqid}.sortedByPos.bam"
        output:
            bam = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam",
            metric = "Result/BWA/{fastqid}.sortedByPos.rmdp.txt"
        shell:
            "picard MarkDuplicates INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.metric};"
            "rm {input.bam}"

    # rule scatac_bamindex:
    #     input:
    #         bam = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam"
    #     output:
    #         bai = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam.bai"
    #     shell:
    #         "samtools index {input.bam}"

    rule scatac_bammerge:
        input:
            bam = expand("Result/BWA/{fastqid}.sortedByPos.rmdp.bam", fastqid = get_fastqlist(config["fastqdir"]))
        output:
            bam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.bam",
            bamlist = "Result/BWA/" + config["outprefix"] + "_bamlist.txt",
            fragbed = "Result/QC/" + config["outprefix"] + "_frag.bed"
        params:
            sam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.sam",
            bamprefix = "Result/BWA/" + config["outprefix"] + "_bamlist_",
            subprefix = "Result/BWA/" + config["outprefix"]
        threads:
            config["cores"]
        shell:
            "ls Result/BWA/*.sortedByPos.rmdp.bam > {output.bamlist};"
            "split -1000 -d {output.bamlist} {params.bamprefix};"
            "for file in $(ls {params.bamprefix}*); do sub=${{file#{params.bamprefix}}};"
            "samtools merge --threads {threads} {params.subprefix}.${{sub}}.sortedByPos.rmdp.bam -b ${{file}}; done;"
            "samtools merge --threads {threads} {output.bam} {params.subprefix}.*.sortedByPos.rmdp.bam;"
            "rm {params.subprefix}.[0-9]*.sortedByPos.rmdp.bam;"
            "samtools view {output.bam} > {params.sam};"
            "head -n 10000000 {params.sam} | awk '{{if ($9>0) print $9}}' > {output.fragbed};"
            "rm {params.sam};"

    rule scatac_single_qcstat:
        input:
            bam = "Result/BWA/{fastqid}.sortedByPos.rmdp.bam",
            promoter = SCRIPT_PATH + "/annotations/" + config["species"] + "_promoter.bed",
            chrM = SCRIPT_PATH + "/annotations/" + config["species"] + "_chrM.bed",
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak"
        output:
            log = "Result/Log/bamLog/{fastqid}.mapping.log",
            bed = "Result/BWA/{fastqid}.sortedByPos.rmdp.bed",
        shell:
            "samtools flagstat {input.bam} > {output.log};"
            "bamToBed -i {input.bam} > {output.bed};"
            "intersectBed -wa -a {output.bed} -b {input.chrM} -u | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.promoter} -u | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.peak} -u | wc -l >> {output.log};"

    rule scatac_bulk_qcstat:
        input:
            bam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.bam",
            promoter = SCRIPT_PATH + "/annotations/" + config["species"] + "_promoter.bed",
            chrM = SCRIPT_PATH + "/annotations/" + config["species"] + "_chrM.bed",
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak"
        output:
            bulkqc = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
            bed = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.bed",
        shell:
            "samtools flagstat {input.bam} > {output.bulkqc};"
            "bamToBed -i {input.bam} > {output.bed};"
            "intersectBed -wa -a {output.bed} -b {input.chrM} -u | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.promoter} -u | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.peak} -u | wc -l >> {output.bulkqc};"

    rule scatac_qcplot:
        input:
            log = expand("Result/Log/bamLog/{fastqid}.mapping.log", fastqid = get_fastqlist(config["fastqdir"])),
            fragbed = "Result/QC/" + config["outprefix"] + "_frag.bed",
        output:
            stat = "Result/QC/singlecell.txt",
            qcmapall = "Result/QC/" + config["outprefix"] + "_scATAC_mapping_summary.txt",
            qcfrag = "Result/QC/" + config["outprefix"] + "_scATAC_fragment_size.png",
            qcmap = "Result/QC/" + config["outprefix"] + "_scATAC_mapping_summary.png",
            qcfrip = "Result/QC/" + config["outprefix"] + "_scATAC_cell_filtering.png",
            validbarcode = "Result/QC/" + config["outprefix"] + "_scATAC_validcells.txt",
        params:
            log = "Result/Log/bamLog/",
            platform = config["platform"],
            outdir = "Result/QC",
            outpre = config["outprefix"],
            stat = "singlecell.txt",
            fragbed = config["outprefix"] + "_frag.bed",
        shell:
            "python " + SCRIPT_PATH + "/scATAC_microfluidic_qc.py {params.log} {output.stat};"
            "Rscript " + RSCRIPT_PATH + "/scATACseq_qc.R {params.stat} {params.fragbed} {params.platform} {params.outpre} {params.outdir}"

    rule scatac_allpeakcall:
        input:
            bam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.bam"
        output:
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
            bdg = "Result/Analysis/" + config["outprefix"] + "_all_treat_pileup.bdg",
        params:
            name = "Result/Analysis/" + config["outprefix"] + "_all"
        log:
            "Result/Log/" + config["outprefix"] + "_macs2_allpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.bam}"
    
    if config["shortpeaks"]:
        rule scatac_shortfragment:
            input:
                bam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.bam"
            output:
                shortsam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.150bp.sam"
            shell:
                "samtools view {input.bam} | awk -F'\\t' 'function abs(x){{return ((x < 0.0) ? -x : x)}} {{if (abs($9)<=150) print}}' > {output.shortsam}"
        
        rule scatac_shortpeakcall:
            input:
                sam = "Result/BWA/" + config["outprefix"] + ".merged.sortedByPos.rmdp.150bp.sam"            
            output:
                bed = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak"
            params:
                name = "Result/Analysis/" + config["outprefix"] + "_150bp"
            log:
                "Result/Log/" + config["outprefix"] + "_macs2_shortpeak.log"
            conda:
                ENV_PATH + "/environment_py2.yaml"
            shell:
                "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.sam}"
    
    if config["custompeaks"] and config["shortpeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak",
                custompeak = config["custompeaksloc"]
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} {input.custompeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    elif config["custompeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                custompeaks = config["custompeaksloc"]
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"                
            shell:
                "cat {input.allpeak} {input.custompeaks} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    elif config["shortpeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak"
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    else:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"

    rule scatac_countpeak:
        input:
            finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed",
            validbarcode = "Result/QC/" + config["outprefix"] + "_scATAC_validcells.txt"
        output:
            count = "Result/Analysis/" + config["outprefix"] + "_peak_count.txt"
        threads:
            config["cores"]
        params:
            bamdir = "Result/BWA"
        shell:
            "python " + SCRIPT_PATH + "/scATAC_microfluidic_count.py {input.finalpeak} {input.validbarcode} {params.bamdir} {output.count} {threads}"
            
if config["platform"] == "10x-genomics":
    rule scatac_cellranger:
        input:
            fastqs = config["fastqdir"],
            genome = config["genome"]["cellranger"]
        output:
            stat = "Result/Cellranger/" + config["outprefix"] + "/outs/singlecell.csv",
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.bam",
            frag = "Result/Cellranger/" + config["outprefix"] + "/outs/fragments.tsv.gz"
        params:
            fastqprefix = config["fastqprefix"],
            outpre = config["outprefix"],
            sourceoutdir = config["outprefix"] + "/",
            destoutdir = "Result/Cellranger/"
        threads:
            config["cores"]
        log:
            "Result/Log/" + config["outprefix"] + "_cellranger.log"
        shell:
            "cellranger-atac count --id={params.outpre} --fastqs={input.fastqs} "
            "--reference={input.genome} --sample={params.fastqprefix} --localcores={threads} "
            ">> {log};"
            "cp -fr {params.sourceoutdir} {params.destoutdir};"
            "rm -r {params.sourceoutdir};"

    rule scatac_bulk_qcstat:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.bam",
            promoter = SCRIPT_PATH + "/annotations/" + config["species"] + "_promoter.bed",
            chrM = SCRIPT_PATH + "/annotations/" + config["species"] + "_chrM.bed",
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak"
        output:
            bulkqc = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
            bed = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.bed",
        shell:
            "samtools flagstat {input.bam} > {output.bulkqc};"
            "bamToBed -i {input.bam} > {output.bed};"
            "intersectBed -wa -a {output.bed} -b {input.chrM} -u | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.promoter} -u | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.peak} -u | wc -l >> {output.bulkqc};"

    rule scatac_qcplot:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.bam",
            stat = "Result/Cellranger/" + config["outprefix"] + "/outs/singlecell.csv",
        output:
            fragbed = "Result/QC/" + config["outprefix"] + "_frag.bed",
            qcfrag = "Result/QC/" + config["outprefix"] + "_scATAC_fragment_size.png",
            qcmap = "Result/QC/" + config["outprefix"] + "_scATAC_mapping_summary.png",
            qcfrip = "Result/QC/" + config["outprefix"] + "_scATAC_cell_filtering.png",
            validbarcode = "Result/QC/" + config["outprefix"] + "_scATAC_validcells.txt",
        params:
            platform = config["platform"],
            outdir = "Result/QC",
            outpre = config["outprefix"],
            stat = "../Cellranger/" + config["outprefix"] + "/outs/singlecell.csv",
            fragbed = config["outprefix"] + "_frag.bed",
            sam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.sam"
        shell:
            "samtools view {input.bam} > {params.sam};"
            "head -n 10000000 {params.sam} | awk '{{if ($9>0) print $9}}' > {output.fragbed};"
            "rm {params.sam};"
            "Rscript " + RSCRIPT_PATH + "/scATACseq_qc.R {params.stat} {params.fragbed} {params.platform} {params.outpre} {params.outdir}"

    rule scatac_allpeakcall:
        input:
            bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.bam"
        output:
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
            bdg = "Result/Analysis/" + config["outprefix"] + "_all_treat_pileup.bdg",
        params:
            name = "Result/Analysis/" + config["outprefix"] + "_all"
        log:
            "Result/Log/" + config["outprefix"] + "_macs2_allpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.bam}"

    if config["shortpeaks"]:
        rule scatac_shortfragment:
            input:
                bam = "Result/Cellranger/" + config["outprefix"] + "/outs/possorted_bam.bam"
            output:
                shortsam = "Result/Cellranger/" + config["outprefix"] + "possorted_150bp.sam"
            shell:
                "samtools view {input.bam} | awk -F'\\t' 'function abs(x){{return ((x < 0.0) ? -x : x)}} {{if (abs($9)<=150) print}}' > {output.shortsam}"
        
        rule scatac_shortpeakcall:
            input:
                shortsam = "Result/Cellranger/" + config["outprefix"] + "possorted_150bp.sam"
            output:
                bed = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak"
            params:
                name = "Result/Analysis/" + config["outprefix"] + "_150bp"
            log:
                "Result/Log/" + config["outprefix"] + "_macs2_shortpeak.log"
            conda:
                ENV_PATH + "/environment_py2.yaml"
            shell:
                "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.shortsam}"
    
    if config["custompeaks"] and config["shortpeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak",
                custompeak = config["custompeaksloc"]
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} {input.custompeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    elif config["custompeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                custompeaks = config["custompeaksloc"]
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"                
            shell:
                "cat {input.allpeak} {input.custompeaks} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    elif config["shortpeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + config["outprefix"]  + "_150bp_peaks.narrowPeak"
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    else:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
     
    rule scatac_countpeak:
        input:
            finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed",
            validbarcode = "Result/QC/" + config["outprefix"] + "_scATAC_validcells.txt",
            frag = "Result/Cellranger/" + config["outprefix"] + "/outs/fragments.tsv.gz"
        output:
            count = "Result/Analysis/" + config["outprefix"] + "_peak_count.txt"
        params:
            frag = "Result/Cellranger/" + config["outprefix"] + "/outs/fragments.tsv"
        threads:
            config["cores"]
        shell:
            "gzip -d {input.frag};"
            "python " + SCRIPT_PATH + "/scATAC_cellranger_count.py {input.finalpeak} {input.validbarcode} {params.frag} {output.count} {threads}"

if config["platform"] == "sci-ATAC-seq":
    rule scatac_map:
        input:
            fasta = config["genome"]["fasta"],
            fastq1 = config["fastqdir"] + "/" + config["fastqprefix"] + "_1.fastq",
            fastq2 = config["fastqdir"] + "/" + config["fastqprefix"] + "_2.fastq"
        output:
            bam = temp("Result/BWA/" + config["outprefix"] + ".sortedByPos.bam")
        threads:
            config["cores"]
        log:
            "Result/Log/" + config["outprefix"] + "_BWA_map.log"
        shell:
            "bwa mem -t {threads} {input.fasta} {input.fastq1} {input.fastq2} "
            "| samtools view --threads {threads} -b "
            "| samtools sort --threads {threads} -o {output.bam}"

    rule scatac_rmdp:
        input:
            bam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.bam"
        output:
            bam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.bam",
            metric = "Result/BWA/" + config["outprefix"] + ".rmdp.txt",
            fragbed = "Result/QC/" + config["outprefix"] + "_frag.bed"
        params:
            sam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.sam"
        shell:
            "picard MarkDuplicates INPUT={input.bam} OUTPUT={output.bam} METRICS_FILE={output.metric};"
            "samtools view {input.bam} > {params.sam};"
            "head -n 10000000 {params.sam} | awk '{{if ($9>0) print $9}}' > {output.fragbed};"

    checkpoint scatac_samsplit:
        input:
            bam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.bam",
            barcodelib = config["barcodelib"]
        output:
            bam = directory("Result/BWA/Split/"),
        threads:
            config["cores"]
        shell:
            "python " + SCRIPT_PATH + "/scATAC_sci_split.py -S {input.bam} -P {threads} -B {input.barcodelib}"

    rule scatac_single_qcstat:
        input:
            sam = "Result/BWA/Split/{barcodeid}.sam",
            promoter = SCRIPT_PATH + "/annotations/" + config["species"] + "_promoter.bed",
            chrM = SCRIPT_PATH + "/annotations/" + config["species"] + "_chrM.bed",
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak"
        output:
            log = "Result/Log/bamLog/{barcodeid}.mapping.log",
            bed = "Result/BWA/Split/{barcodeid}.sortedByPos.rmdp.bed",
        threads:
            config["cores"]
        shell:
            "samtools flagstat --threads {threads} {input.sam} > {output.log};"
            "samtools view --threads {threads} -b {input.sam} | bamToBed -i > {output.bed};"
            "intersectBed -wa -a {output.bed} -b {input.chrM} -u | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.promoter} -u | wc -l >> {output.log};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.peak} -u | wc -l >> {output.log};"

    rule scatac_bulk_qcstat:
        input:
            bam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.bam",
            promoter = SCRIPT_PATH + "/annotations/" + config["species"] + "_promoter.bed",
            chrM = SCRIPT_PATH + "/annotations/" + config["species"] + "_chrM.bed",
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak"
        output:
            bulkqc = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
            bed = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.ced",
        shell:
            "samtools flagstat {input.bam} > {output.bulkqc};"
            "bamToBed -i {input.bam} > {output.bed};"
            "intersectBed -wa -a {output.bed} -b {input.chrM} -u | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.promoter} -u | wc -l >> {output.bulkqc};"
            "cut -f 1-3 {output.bed} | sort -k1,1 -k2,2n | uniq | grep -v 'chrM' | intersectBed -wa -a - -b {input.peak} -u | wc -l >> {output.bulkqc};"

    rule scatac_qcplot:
        input:
            log = qcplot_input,
            fragbed = "Result/QC/" + config["outprefix"] + "_frag.bed",
        output:
            stat = "Result/QC/singlecell.txt",
            qcfrag = "Result/QC/" + config["outprefix"] + "_scATAC_fragment_size.png",
            qcmap = "Result/QC/" + config["outprefix"] + "_scATAC_mapping_summary.png",
            qcfrip = "Result/QC/" + config["outprefix"] + "_scATAC_cell_filtering.png",
            validbarcode = "Result/QC/" + config["outprefix"] + "_scATAC_validcells.txt",
        params:
            log = "Result/Log/bamLog/",
            platform = config["platform"],
            outdir = "Result/QC",
            outpre = config["outprefix"],
            stat = "singlecell.txt",
            fragbed = config["outprefix"] + "_frag.bed"
        shell:
            "python " + SCRIPT_PATH + "/scATAC_microfluidic_qc.py {params.log} {output.stat};"
            "Rscript " + RSCRIPT_PATH + "/scATACseq_qc.R {params.stat} {params.fragbed} {params.platform} {params.outpre} {params.outdir}"

    rule scatac_allpeakcall:
        input:
            bam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.bam"
        output:
            peak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
            bdg = "Result/Analysis/" + config["outprefix"] + "_all_treat_pileup.bdg"
        params:
            name = "Result/Analysis/" + config["outprefix"] + "_all"
        log:
            "Result/Log/" + config["outprefix"] + "_macs2_allpeak.log"
        conda:
            ENV_PATH + "/environment_py2.yaml"
        shell:
            "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.bam}"

    if config["shortpeaks"]:
        rule scatac_shortfragment:
            input:
                bam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.bam"
            output:
                shortsam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.150bp.sam"
            shell:
                "samtools view {input.bam} | awk -F'\\t' 'function abs(x){{return ((x < 0.0) ? -x : x)}} {{if (abs($9)<=150) print}}' > {output.shortsam}"
        
        rule scatac_shortpeakcall:
            input:
                sam = "Result/BWA/" + config["outprefix"] + ".sortedByPos.rmdp.150bp.sam"
            output:
                bed = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak"
            params:
                name = "Result/Analysis/" + config["outprefix"] + "_150bp"
            log:
                "Result/Log/" + config["outprefix"] + "_macs2_shortpeak.log"
            conda:
                ENV_PATH + "/environment_py2.yaml"
            shell:
                "macs2 callpeak -g hs -n {params.name} -B -q 0.05 --nomodel --extsize=50 --SPMR -t {input.sam}"
    
    if config["custompeaks"] and config["shortpeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak",
                custompeak = config["custompeaksloc"]
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} {input.custompeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    elif config["custompeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                custompeaks = config["custompeaksloc"]
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"                
            shell:
                "cat {input.allpeak} {input.custompeaks} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    elif config["shortpeaks"]:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
                shortpeak = "Result/Analysis/" + config["outprefix"] + "_150bp_peaks.narrowPeak"
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} {input.shortpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"
    else:
        rule scatac_mergepeak:
            input:
                allpeak = "Result/Analysis/" + config["outprefix"] + "_all_peaks.narrowPeak",
            output:
                finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed"
            params:
                catpeaksort = "Result/Analysis/" + config["outprefix"] + "_cat_peaks.bed"
            shell:
                "cat {input.allpeak} "
                "| sort -k1,1 -k2,2n | cut -f 1-4 > {params.catpeaksort};"
                "mergeBed -i {params.catpeaksort} | grep -v '_' | grep -v 'chrEBV' > {output.finalpeak};"
                "rm {params.catpeaksort}"

    rule scatac_countpeak:
        input:
            finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed",
            validbarcode = "Result/QC/" + config["outprefix"] + "_scATAC_validcells.txt"
        output:
            count = "Result/Analysis/" + config["outprefix"] + "_peak_count.txt"
        threads:
            config["cores"]
        params:
            bamdir = "Result/BWA/Split"
        shell:
            "python " + SCRIPT_PATH + "/scATAC_microfluidic_count.py {input.finalpeak} {input.validbarcode} {params.bamdir} {output.count} {threads}"

rule scatac_bdg2bw:
    input:
        bdg = "Result/Analysis/" + config["outprefix"] + "_all_treat_pileup.bdg",
        chrlimit = SCRIPT_PATH + "/annotations/" + config["species"] + "_chr_limit.bed",
        chrlen = SCRIPT_PATH + "/annotations/" + config["species"] + "_chr.len",
    output:
        tmp = "Result/Analysis/" + config["outprefix"] + "_all_treat_pileup.bdg.tmp",
        bigwig = "Result/Analysis/" + config["outprefix"] + "_all.bw"
    params:
        outdir = "Result/Analysis/" + config["outprefix"]
    shell:
        "bedtools intersect -a {input.bdg} -b {input.chrlimit} -wa -f 1.00 > {output.tmp};"
        "bedSort {output.tmp} {input.bdg};"
        "bedGraphToBigWig {input.bdg} {input.chrlen} {output.bigwig};"

rule scatac_ceas:
    input:
        finalpeak = "Result/Analysis/" + config["outprefix"] + "_final_peaks.bed",
        bigwig = "Result/Analysis/" + config["outprefix"] + "_all.bw",
        refgene = SCRIPT_PATH + "/annotations/" + config["species"] + ".refGene",
        chrlen = SCRIPT_PATH + "/annotations/" + config["species"] + "_chr.len",
    output:
        ceas = "Result/QC/" + config["outprefix"] + "_scATAC_CEAS.pdf"
    params:
        outdir = "Result/QC/" + config["outprefix"] + "_scATAC_CEAS"
    conda:
        ENV_PATH + "/environment_py2.yaml"
    shell:
        "ceasBW -b {input.finalpeak} -w {input.bigwig} -g {input.refgene} -l {input.chrlen} --name {params.outdir}"

rule scatac_genescore:
    input:
        count = "Result/Analysis/" + config["outprefix"] + "_peak_count.txt"
    output:
        genescore = "Result/Analysis/" + config["outprefix"] + "_genescore.txt"
    params:
        genedistance = config["genedistance"],
        genebed = SCRIPT_PATH + "/annotations/" + config["species"] +"_ensembl.bed",
    threads:
        config["cores"]
    shell:
        "python " + SCRIPT_PATH + "/scATAC_genescore.py {input.count} {output.genescore} {params.genedistance} {params.genebed} {threads}"

rule scatac_analysis:
    input:
        count = "Result/Analysis/" + config["outprefix"] + "_peak_count.txt",
        genescore = "Result/Analysis/" + config["outprefix"] + "_genescore.txt"
    output:
        specificpeak = "Result/Analysis/" + config["outprefix"] + "_DiffPeaks.tsv",
        clusterplot = "Result/Analysis/" + config["outprefix"] + "_cluster.png",
        annotateplot = "Result/Analysis/" + config["outprefix"] + "_annotated.png",
    params:
        outdir = "Result/Analysis",
        genescore = config["outprefix"] + "_genescore.txt",
        outpre = config["outprefix"],
        count = config["outprefix"] + "_peak_count.txt",
        giggleannotation = config["giggleannotation"],
        species = config["species"]
    shell:
        "Rscript " + RSCRIPT_PATH + "/scATACseq_pipe.R {params.count} {params.genescore} {params.species} {params.giggleannotation} {params.outpre} {params.outdir}"

rule scatac_report:
    input:
        bulkqc = "Result/QC/" + config["outprefix"] + "_bam_stat.txt",
        qcmap = "Result/QC/" + config["outprefix"] + "_scATAC_mapping_summary.png",
        qcfrag = "Result/QC/" + config["outprefix"] + "_scATAC_fragment_size.png",
        qcfrip = "Result/QC/" + config["outprefix"] + "_scATAC_cell_filtering.png",
        count = "Result/Analysis/" + config["outprefix"] + "_peak_count.txt",
        clusterplot = "Result/Analysis/" + config["outprefix"] + "_cluster.png",
        annotateplot = "Result/Analysis/" + config["outprefix"] + "_annotated.png",
        genescore = "Result/Analysis/" + config["outprefix"] + "_genescore.txt",
        ceas = "Result/QC/" + config["outprefix"] + "_scATAC_CEAS.pdf"
    output:
        summaryreport = "Result/Summary/" + config["outprefix"] + "_scATAC_report.html",
        outdir = directory("Result/Summary/Plot/")
    params:
        outpre = config["outprefix"],
        fastqdir = config["fastqdir"],
        species = config["species"],
        platform = config["platform"]
    shell:
        "cp {input.qcmap} {input.qcfrag} {input.qcfrip} {input.clusterplot} {input.annotateplot} {output.outdir};"
        "python " + SCRIPT_PATH + "/scATAC_report.py {params.outpre} {params.fastqdir} {params.species} {params.platform}"
