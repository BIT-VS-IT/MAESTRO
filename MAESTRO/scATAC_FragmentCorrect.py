# -*- coding: utf-8 -*-
# @Author: Dongqing Sun
# @E-mail: Dongqingsun96@gmail.com
# @Date:   2020-01-17 02:45:39
# @Last Modified by:   Dongqing Sun
# @Last Modified time: 2020-02-28 00:54:21


import argparse
import pysam
import time, os
from collections import defaultdict

chr_list = ['chr'+str(i) for i in list(range(1,23))] 
chr_list = chr_list + ['chrX', 'chrY']

def CommandLineParser():
    parser=argparse.ArgumentParser(description = "This is a description of input args")
    parser.add_argument("-F","--fragment", dest = "fragment",default = "",help = "The fragment file generated by scATAC_GenerateFragment.py.")
    parser.add_argument("-C","--barcodecorrect",dest = "barcode_correct",default = "",help = "The barcode correct file generated by scATAC_BarcodeCorrect.py.")
    parser.add_argument("-O", "--outdir", dest = "outdir",default = "",help = "The output directory.")

    return parser.parse_args()

parser = CommandLineParser()
fragment = parser.fragment
barcode_correct = parser.barcode_correct
outdir = parser.outdir
frag_correct = os.path.join(outdir, "fragments_corrected.tsv")


# Read barcode correct file
start_time = time.time()
print("Start to read barcode correct file",time.strftime("%a %b %d %H:%M:%S %Y", time.localtime()))
barcode_lib_dict = defaultdict(set)
with open(barcode_correct, "r") as barcode_correct_in:
    for line in barcode_correct_in:
        line_list = line.strip().split("\t")
        barcode_lib_dict[line_list[1]].add(line_list[2])
end_time = time.time()
print("End", end_time-start_time)


# Correct barcode
start_time = time.time()
print("Start to correct barcode",time.strftime("%a %b %d %H:%M:%S %Y", time.localtime()))
frag_correct_out = open(frag_correct, "w")
with open(fragment, "r") as fragment_in:
    for line in fragment_in:
        line_list = line.strip().split("\t")
        barcode_obs = line_list[3]
        if barcode_obs in barcode_lib_dict:
            for bc in list(barcode_lib_dict[barcode_obs]):
                line_list[3] = bc
                outstr = "\t".join(line_list) + "\n"
                frag_correct_out.write(outstr)
        else:
            pass
end_time = time.time()
print("End", end_time-start_time)

