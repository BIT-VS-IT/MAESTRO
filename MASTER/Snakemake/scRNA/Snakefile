"""
A single cell RNA-seq analysis pipeline.
"""

configfile: "config.yaml"

outprefix = config["outprefix"]

import yaml
import sys
import os

from strap.scRNA_utility import get_fastqfile, get_fastqid, get_fastqlist, get_bamfile, RSCRIPT_PATH

if not config["startfromcount"]:
    rule all:
        input:
            analysis = "Result/Analysis",
            qc = "Result/RSeQC/" + outprefix + "_read_distribution.txt"
else:
    rule all:
        input:
            analysis = "Result/Analysis"


if config["platform"] == "10xGenomics":
    rule cellranger:
        input:
            fastqs = config["fastqdir"],
            genome = config["genome"]["cellranger"]
        output:
            matrix = "Result/cellranger/" + outprefix + "/outs/filtered_feature_bc_matrix/barcodes.tsv",
            bam = "Result/cellranger/" + outprefix + "/outs/possorted_genome_bam.bam"
        params:
            outpre = outprefix,
            sourceoutdir = outprefix + "/",
            destoutdir = "Result/cellranger/",
            fastqprefix = config["fastqprefix"],
            expression = "Result/cellranger/" + outprefix + "/outs/filtered_feature_bc_matrix/*.gz"
        log:
            "Result/Log/" + outprefix + "_cellranger.log"
        threads:
            config["cores"]
        shell:
            "cellranger count --id={params.outpre} --fastqs={input.fastqs} "
            "--transcriptome={input.genome} --sample={params.fastqprefix} --localcores={threads} "
            ">> {log};"
            "cp -fr {params.sourceoutdir} {params.destoutdir};"
            "rm -r {params.sourceoutdir};"
            "gzip -d {params.expression}"

    rule rseqc_qc:
        input:
            bam = "Result/cellranger/" + outprefix + "/outs/possorted_genome_bam.bam",
            genome = config["genome"]["bed"]
        output:
            stat = "Result/RSeQC/" + outprefix + "_bam_stat.txt",
            distr = "Result/RSeQC/" + outprefix + "_read_distribution.txt"
        params:
            dup = "Result/RSeQC/" + outprefix + "_dup",
            qual = "Result/RSeQC/" + outprefix + "_qual"
        shell:
            "bam_stat.py -i {input.bam} > {output.stat};"
            "read_duplication.py -i {input.bam} -o {params.dup};"
            "read_quality.py -i {input.bam} -o {params.qual};"
            "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr};"

    if not config["startfromcount"]:
        rule scrna_analysis:
            input:
                expression = "Result/cellranger/" + outprefix + "/outs/filtered_feature_bc_matrix/barcodes.tsv"
            output:
                directory("Result/Analysis")
            params:
                expression = "../cellranger/" + outprefix + "/outs/filtered_feature_bc_matrix/",
                species = config["species"],
                method = config["method"],
                platform = config["platform"],
                outpre = outprefix,
                rscriptpath = RSCRIPT_PATH
            shell:
                "mkdir " + "Result/Analysis;"
                "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.method} {params.outpre} {output} {params.rscriptpath}"
    else:
        rule scrna_analysis:
            input:
                expression = "Result/cellranger/" + outprefix + "/outs/filtered_feature_bc_matrix/barcodes.tsv"
            output:
                directory("Result/Analysis")
            params:
                expression = "../cellranger/" + outprefix + "/outs/filtered_feature_bc_matrix/",
                species = config["species"],
                method = config["method"],
                platform = config["platform"],
                outpre = outprefix,
                idtype = config["geneidtype"],
                rscriptpath = RSCRIPT_PATH
            shell:
                "mkdir Result/Analysis;"
                "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.method} {params.outpre} {output} {params.rscriptpath} {params.idtype}"

if config["platform"] == "Dropseq":
    if "start" in config["barcode"]:
        rule rmlinekr:
            input:
                barcode = config["fastqdir"] + "/" + config["fastq"]["barcode"] + ".fastq"
            output:
                config["fastqdir"] + "/" + config["fastq"]["barcode"] + "_nolinker.fastq"
            params:
                start = config["barcode"]["start"],
                end = config["barcode"]["end"]
            shell:
                "python scRNA_rmLinker.py -f {input.barcode} -s {params.start} -e {params.end} -o {output}"
    else:
        rule rename:
            input:
                barcode = config["fastqdir"] + "/" + config["fastq"]["barcode"] + ".fastq"
            output:
                config["fastqdir"] + "/" + config["fastq"]["barcode"] + "_nolinker.fastq"
            shell:
                "mv {input.barcode} {output}"

    rule drseq:
        input:
            mapindex = config["genome"]["mapindex"],
            anno = config["genome"]["anno"],
            barcode = config["fastqdir"] + "/" + config["fastq"]["barcode"] + "_nolinker.fastq",
            transcript = config["fastqdir"] + "/" + config["fastq"]["transcript"] + ".fastq"
        output:
            expression = "Result/Drseq/" + outprefix + "/expmatrix/" + outprefix + "_expmat.txt",
            sam = "Result/Drseq/" + outprefix + "/mapping/" + outprefix + ".sam"
        params:
            umilength = config["barcode"]["umilength"],
            barcodelength = config["barcode"]["barcodelength"],
            outpre = outprefix
        log:
            "Result/Log/" + outprefix + "_drseq.log"
        threads:
            config["cores"]
        shell:
            "cd Result/Drseq/;"
            "Drseq.py simple -b {input.barcode} -r {input.transcript} "
            "--cellbarcodelength {params.barcodelength} --umilength {params.umilength} -g {input.anno} --maptool STAR "
            "--mapindex {input.mapindex} --thread {threads} --checkmem 0 -n {params.outpre} -f "
            ">> ../../{log};"
            "cd ../../;"

    rule rseqc_qc:
        input:
            sam = "Result/Drseq/" + outprefix + "/mapping/" + outprefix + ".sam",
            genome = config["genome"]["bed"]
        output:
            stat = "Result/RSeQC/" + outprefix + "_bam_stat.txt",
            dup = "Result/RSeQC/" + outprefix + "_dup",
            qual = "Result/RSeQC/" + outprefix + "_qual",
            distr = "Result/RSeQC/" + outprefix + "_read_distribution.txt"
        shell:
            "bam_stat.py -i {input.sam} > {output.stat};"
            "read_duplication.py -i {input.sam} -o {output.dup};"
            "read_quality.py -i {input.sam} -o {output.qual};"
            "read_distribution.py -i {input.sam} -r {input.genome} > {output.distr};"
    
    if not config["startfromcount"]:
        rule scrna_analysis:
            input:
                expression = "Result/Drseq/" + outprefix + "/expmatrix/" + outprefix + "_expmat.txt"
            output:
                directory("Result/Analysis")
            params:
                expression = "../Drseq/" + outprefix + "/expmatrix/" + outprefix + "_expmat.txt",
                species = config["species"],
                method = config["method"],
                platform = config["platform"],
                outpre = outprefix
            shell:
                "mkdir Result/Analysis;"
                "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.method} {params.outpre} {output}"
    else:
        rule scrna_analysis:
            input:
                expression = "Result/Drseq/" + outprefix + "/expmatrix/" + outprefix + "_expmat.txt"
            output:
                directory("Result/Analysis")
            params:
                expression = "../Drseq/" + outprefix + "/expmatrix/" + outprefix + "_expmat.txt",
                species = config["species"],
                method = config["method"],
                platform = config["platform"],
                outpre = outprefix,
                idtype = config["geneidtype"]
            shell:
                "mkdir Result/Analysis;"
                "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.method} {params.outpre} {output} {params.idtype}"      

if config["platform"] == "Smartseq2":
    rule star_map:
        input:
            mapindex = config["genome"]["mapindex"],
            fastq1 = config["fastqdir"] + "/{fastqid}_1.fastq",
            fastq2 = config["fastqdir"] + "/{fastqid}_2.fastq"
        output:
            "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
        params:
            outdir = "Result/Mapping/{fastqid}"
        log:
            "Result/Log/{fastqid}_STAR_map.log"
        threads:
            config["cores"]
        shell:
            "STAR --genomeDir {input.mapindex} --runThreadN {threads} "
            "--outFilterMultimapNmax 500 --outFilterMismatchNmax 3 "
            "--outFileNamePrefix {params.outdir} --outSAMtype BAM SortedByCoordinate "
            "--readFilesIn {input.fastq1} {input.fastq2} "
            ">> {log}"

    rule bam_psort:
        input:
            bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
        output:
            bam = "Result/Mapping/{fastqid}Aligned.sortedByPos.out.bam"
        threads:
            config["cores"]
        shell:
            "samtools sort {input.bam} -o {output.bam} --threads {threads}"

    rule stringtie_assambly:
        input:
            genome = config["genome"]["gtf"],
            bam = "Result/Mapping/{fastqid}Aligned.sortedByPos.out.bam"
        output:
            gtf = "Result/Count/{fastqid}/{fastqid}.gtf"
        log:
            "Result/Log/{fastqid}_StringTie_assembly.log"
        shell:
            "stringtie {input.bam} -e -B -p 8 "
            "-G {input.genome} -o {output.gtf} "
            ">> {log}"

    rule gtf2matrix:
        input:
            gtfdir = expand("Result/Count/{fastqid}/{fastqid}.gtf", fastqid = get_fastqlist(config["fastqdir"]))
        params:
            gtfdir = "Result/Count/"
        output:
            gene = "Result/Count/" + outprefix + "_gene_count_matrix.csv",
            transcript = "Result/Count/" + outprefix + "_transcript_count_matrix.csv"
        shell:
            "prepDE.py -i {params.gtfdir} -g {output.gene} -t {output.transcript}"

    rule csv2table:
        input:
            csv = "Result/Count/" + outprefix + "_gene_count_matrix.csv"
        output:
            table = "Result/Count/" + outprefix + "_expmat.txt"
        shell:
            "Rscript " + RSCRIPT_PATH + "/scRNAseq_csv2table.R {input.csv} {output.table}"

    rule bam_rsort:
        input:
            bam = "Result/Mapping/{fastqid}Aligned.sortedByCoord.out.bam"
        output:
            bam = "Result/Mapping/{fastqid}Aligned.sortedByReads.out.bam"
        threads:
            config["cores"]
        shell:
            "samtools sort -n {input.bam} -o {output.bam} --threads {threads}"

    rule bam_merge:
        input:
            bam = expand("Result/Mapping/{fastqid}Aligned.sortedByReads.out.bam", fastqid = get_fastqlist(config["fastqdir"]))
        params:
            bam_dir = "Result/Mapping/",
            bam = expand("Result/Mapping/{fastqid}Aligned.sortedByReads.out.bam", fastqid = get_fastqlist(config["fastqdir"]))
        output:
            bam = "Result/Mapping/" + outprefix + "Aligned.sortedByReads.out.bam"
        threads:
            config["cores"]
        shell:
            "ls {params.bam_dir}*Aligned.sortedByReads.out.bam > {params.bam_dir}bam_list.txt;"
            "bam=$(cat {params.bam_dir}bam_list.txt);"
            "bam_num=$(ls {params.bam_dir}*Aligned.sortedByReads.out.bam | wc -l);"
            "ulimit -n $(($bam_num+20));"
            "samtools merge --threads {threads} {output.bam} $bam"

    rule rseqc_qc:
        input:
            bam = "Result/Mapping/" + outprefix + "Aligned.sortedByReads.out.bam",
            genome = config["genome"]["bed"]
        output:
            stat = "Result/RSeQC/" + outprefix + "_bam_stat.txt",
            distr = "Result/RSeQC/" + outprefix + "_read_distribution.txt"
        params:
            dup = "Result/RSeQC/" + outprefix + "_dup",
            qual = "Result/RSeQC/" + outprefix + "_qual"
        shell:
            "bam_stat.py -i {input.bam} > {output.stat};"
            "read_duplication.py -i {input.bam} -o {params.dup};"
            "read_quality.py -i {input.bam} -o {params.qual};"
            "read_distribution.py -i {input.bam} -r {input.genome} > {output.distr};"
    
    if not config["startfromcount"]:
        rule scrna_analysis:
            input:
                expression = "Result/Count/" + outprefix + "_expmat.txt"
            output:
                directory("Result/Analysis")
            params:
                expression = "../Count/" + outprefix + "_expmat.txt",
                species = config["species"],
                method = config["method"],
                platform = config["platform"],
                outpre = outprefix,
                rscriptpath = RSCRIPT_PATH
            shell:
                "mkdir Result/Analysis;"
                "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.method} {params.outpre} {output} {params.rscriptpath}"
    else:
        rule scrna_analysis:
            input:
                expression = "Result/Count/" + outprefix + "_expmat.txt"
            output:
                directory("Result/Analysis")
            params:
                expression = "../Count/" + outprefix + "_expmat.txt",
                species = config["species"],
                method = config["method"],
                platform = config["platform"],
                outpre = outprefix,
                idtype = config["geneidtype"],
                rscriptpath = RSCRIPT_PATH
            shell:
                "mkdir Result/Analysis;"
                "Rscript " + RSCRIPT_PATH + "/scRNAseq_pipe.R {params.expression} {params.species} {params.platform} {params.method} {params.outpre} {output} {params.rscriptpath} {params.idtype}"
