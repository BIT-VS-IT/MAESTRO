#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  5 17:26:44 2019

@author: Chenfei Wang, Dongqing Sun
"""

version = "0.0.1"

import logging
import sys
import os
import shutil
import argparse as ap
from pkg_resources import resource_filename


def init_workflow(directory, mode):
    try:
        os.makedirs(directory)
    except OSError:
        # either directory exists (then we can ignore) or it will fail in the
        # next step.
        pass


    def get_resource(f,mode):
        pkgpath = resource_filename('MASTER', '.')
        return os.path.join(pkgpath, "Snakemake", mode, f)

    def get_target(f):
        return os.path.join(directory, f)

    def backup(f):
        target = get_target(f)
        if os.path.exists(target):
            shutil.copy(target, target + ".old")

    def install(f, mode):
        source = get_resource(f, mode)
        target = get_target(f)
        shutil.copy(source, target)

    backup("Snakefile")
    install("Snakefile", mode)
    backup("config.yaml")
    install("config.yaml", mode)


def main():
    # create arg parser
    parser = ap.ArgumentParser(description = "MASTER is a comprehensive quality control, analysis and visualization pipeline for scATAC-seq and scRNA-seq. ")
    parser.add_argument("-v", "--version", action = "store_true", help = "Print version info.")

    subparsers = parser.add_subparsers(dest = "subcommand")
    workflow = subparsers.add_parser("init", help = "Initialize the MASTER workflow in a given directory. "
        "This will install a Snakefile and a config file in this directory. "
        "You can configure the config file according to your needs, and run the workflow with Snakemake "
        "(https://bitbucket.org/johanneskoester/snakemake).")
    workflow.add_argument("-d", "--directory", help = "Path to the directory where the workflow shall be initialized and results shall be stored.")
    workflow.add_argument("-m", "--mode", choices = ["scATAC","scRNA"], help="Analyze scATAC-seq or scRNA-seq")

    logging.basicConfig(format="%(message)s", level=logging.INFO, stream=sys.stderr)

    args = parser.parse_args()

    if args.version:
        print(version)
        exit(0)
    elif args.subcommand == "init":
        init_workflow(args.directory, args.mode)
    else:
        parser.print_help()
        exit(1)
    exit(0)

if __name__ == "__main__":
    main()
