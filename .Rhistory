data(rra.gene_summary)
rra = ReadRRA(rra.gene_summary)
VolcanoView(rra, x = "Score", y = "FDR", Label = "id")
library(MAGeCKFlute)
data(rra.gene_summary)
rra = ReadRRA(rra.gene_summary)
VolcanoView(rra, x = "Score", y = "FDR", Label = "id")
View(rra)
res_21_de = readRDS("/Users/dongqing/Documents/Project/FZ/Result/PC9_diffgene_21.rds")
res_21_de = na.omit(as.data.frame(res_21_de))
res_21_de_plot_gene = unlist(strsplit(row.names(res_21_de), '_'))[seq(2,2*nrow(res_21_de),2)]
res_21_de_plot = res_21_de[!duplicated(res_21_de_plot_gene),]
row.names(res_21_de_plot) = res_21_de_plot_gene[!duplicated(res_21_de_plot_gene)]
VolcanoView(mat = res_21_de_plot, x = "log2FoldChange", y = "padj", x_cutoff = 1, top = 10,
main = paste(as.character(colData[2,1]),"vs",as.character(colData[1,1]),sep = " ")
))
VolcanoView(mat = res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 10,
main = paste(as.character(colData[2,1]),"vs",as.character(colData[1,1]),sep = " "))
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 10,
main = paste(as.character(colData[2,1]),"vs",as.character(colData[1,1]),sep = " "))
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 10)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 10)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 10)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-5)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10) +
ylim(0,50)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,50)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,40)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,20)
res_21_de = readRDS("/Users/dongqing/Documents/Project/FZ/Result/A549_diffgene_21.rds")
res_21_de = na.omit(as.data.frame(res_21_de))
res_21_de_plot_gene = unlist(strsplit(row.names(res_21_de), '_'))[seq(2,2*nrow(res_21_de),2)]
res_21_de_plot = res_21_de[!duplicated(res_21_de_plot_gene),]
row.names(res_21_de_plot) = res_21_de_plot_gene[!duplicated(res_21_de_plot_gene)]
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,20)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,40)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,60)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,100)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,150)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-10, alpha = 1) +
ylim(0,100)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-20, alpha = 1) +
ylim(0,100)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,100)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-10,10)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-8,8)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,40) + xlim(-8,8)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-8,8)
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-8,8) + theme(axis.line = element_blank())
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-8,8) + theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-8,8) + theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
p3 <- VolcanoView(res_21_de_plot, x = "log2FoldChange",
y = "padj", x_cutoff = 1, top = 0, y_cutoff = 1E-15, alpha = 1) +
ylim(0,75) + xlim(-8,8) + theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
ggsave(filename = "/Users/dongqing/Desktop/vocalno_ploy.pdf", width = 5, height = 5, useDingbats = FALSE)
ggsave(filename = "/Users/dongqing/Desktop/vocalno_ploy.pdf",p1, width = 5, height = 2)
ggsave(filename = "/Users/dongqing/Desktop/lisa_regulator.pdf",p1, width = 5, height = 2)
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_classic() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank()) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_linedraw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank()) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/lisa_regulator.pdf",p1, width = 5, height = 2.5)
ggsave(filename = "/Users/dongqing/Desktop/lisa_regulator.pdf",p1, width = 5, height = 2.5)
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
) +
ylim(0, 80) + labs(y = "GIGGLE score")
p2 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_blank()) +
ylim(0, 80) + labs(y = "GIGGLE score")
p2
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_line(size = 2)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 2)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1)) +
ylim(0, 80) + labs(y = "GIGGLE score")
p2 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/giggle_regulator.pdf",p2, width = 5, height = 2.5)
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.8)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.5)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.5),
panel.grid.minor = element_line(size = 0.2)) +
ylim(0, 80) + labs(y = "GIGGLE score")
p2 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.5),
panel.grid.minor = element_line(size = 0.2)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/giggle_regulator.pdf",p2, width = 5, height = 2.5)
p2 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.1),
panel.grid.minor = element_line(size = 0.1)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/giggle_regulator.pdf",p2, width = 5, height = 2.5)
p2 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/giggle_regulator.pdf",p2, width = 5, height = 2.5)
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/giggle_regulator.pdf",p2, width = 4, height = 2)
tf_rank = data.frame(Rank = 1:12,
Score = c(60,45,40,38,20,18,13,12,11,10,6,2),
Type = c(rep("Driver regulator",4),rep("Other regulator",8)))
p1 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_linedraw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15)) +
ylim(0, 80) + labs(y = "LISA score")
p1
ggsave(filename = "/Users/dongqing/Desktop/lisa_regulator.pdf",p1, width = 5, height = 2.5)
tf_rank = data.frame(Rank = 1:12,
Score = c(55,52,40,36,30,16,15,14,11,10,7,3),
Type = c(rep("Driver regulator",5),rep("Other regulator",7)))
p2 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/giggle_regulator.pdf",p2, width = 4, height = 2)
ggsave(filename = "/Users/dongqing/Desktop/lisa_regulator.pdf",p1, width = 4, height = 2)
tf_rank = data.frame(Rank = 1:12,
Score = c(60,45,40,38,20,18,13,12,11,10,6,2),
Type = c(rep("Driver regulator",4),rep("Other regulator",8)))
p1 = ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15)) +
ylim(0, 80) + labs(y = "LISA score")
p1
ggsave(filename = "/Users/dongqing/Desktop/lisa_regulator.pdf",p1, width = 4, height = 2)
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15),
legend.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "pt")) +
ylim(0, 80) + labs(y = "LISA score")
ggplot(tf_rank,aes(x = Rank, y = Score)) +
geom_col(aes(fill = Type)) +
theme_bw() +
scale_fill_manual(values = c("#ef3b2c", "#d9d9d9")) +
theme(legend.position = "top", legend.title = element_blank(),
axis.ticks = element_blank(), axis.text = element_blank(),
panel.border = element_rect(size = 1),
panel.grid.major = element_line(size = 0.15),
panel.grid.minor = element_line(size = 0.15)) +
ylim(0, 80) + labs(y = "GIGGLE score")
ggsave(filename = "/Users/dongqing/Desktop/vocalno_plot.pdf", p3, width = 5, height = 5, useDingbats = FALSE)
ggsave(filename = "/Users/dongqing/Desktop/vocalno_plot.pdf", p3, width = 5, height = 4, useDingbats = FALSE)
install.packages("rjson")
library(rjson)
json_cars <- toJSON(as.list(cars))
library(EPIC)
res3 <- EPIC(bulk=melanoma_data$counts, reference=TRef)
View(res3)
View(res3)
res3[["cellFractions"]]
DoHeatmap(object = pbmc_small)
library(Seurat)
DoHeatmap(object = pbmc_small)
cd_genes <- c("CD247", "CD3E", "CD9")
DotPlot(object = pbmc_small, features = cd_genes)
library(biomaRt)
listEnsemblArchives()
packageVersion("biomaRT")
useMart('ensembl')
mart = useMart('ensembl')
listDatasets(mart)
ensembl = useMart("ensembl")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
View(human)
View(human)
View(mouse)
marker_human = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = marker_mouse ,mart = mouse, attributesL = "hgnc_symbol", martL = human, uniqueRows=T)
hg19 = useMart(biomart = "ensembl",dateset = "hsapiens_gene_ensembl", host = "http://grch37.ensembl.org")
hg19 = useMart(biomart = "ensembl", host = "http://grch37.ensembl.org")
listDatasets
listDatasets()
listDatasets(hg19)
hg19 = useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl",host = "http://grch37.ensembl.org")
hg38 = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
View(hg19)
hg19@filters[["name"]]
listAttributes(hg19)
hg19_genes = read.table("~/Desktop/COAD_GSE108989_genes.txt")
View(hg19_genes)
marker_human = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = hg19_genes$V1 ,mart = hg19, attributesL = "hgnc_symbol", martL = hg38, uniqueRows=T)
library(biomaRt)
listEnsembl()
listEnsembl("GRCh=37")
listEnsembl("GRCh37")
listEnsembl(GRCh=37)
listEnsembl(GRCh=38)
hg38_ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
hg19_ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl",GRCh=37)
marker_human = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = hg19_genes$V1 ,mart = hg19_ensembl, attributesL = "hgnc_symbol", martL = hg38_ensembl, uniqueRows=T)
hg19_ensembl$host
hg19_ensembl@host
hg38_ensembl@host
hg19_gene = getBM(attributes = c("hgnc_symbol","ensembl_gene_id"), filters = "hgnc_symbol", values = hg19_genes$V1, mart = hg19_ensembl)
hg38_gene = getBM(attributes = c("hgnc_symbol","ensembl_gene_id"), filters = "hgnc_symbol", values = hg19_genes$V1, mart = hg38_ensembl)
View(hg38_gene)
length(unique(hg38_gene$hgnc_symbol))
length(unique(hg19_gene$hgnc_symbol))
hg38_hg19_merge = merge(hg38_gene, hg19_gene, by = "ensembl_gene_id")
View(hg38_hg19_merge)
hg38_hg19_merge_symbol =  merge(hg38_gene, hg19_gene, by = "hgnc_symbol")
View(hg38_hg19_merge_symbol)
length(unique(hg38_hg19_merge_symbol$hgnc_symbol))
length(unique(hg38_hg19_merge$hgnc_symbol.x))
length(unique(hg38_hg19_merge$hgnc_symbol.y))
View(hg38_hg19_merge)
hg38_hg19_merge$hgnc_symbol.x == hg38_hg19_merge$hgnc_symbol.y
which(hg38_hg19_merge$hgnc_symbol.x != hg38_hg19_merge$hgnc_symbol.y)
RNABatchCorrect
library(MAESTRO)
RNABatchCorrect
library(devtools)
install_github("immunogenomics/harmony")
install_github("chenfeiwang/MAESTRO")
RNACountToTPM
data(GRCh38.ensembl)
force(GRCh38.ensembl)
force(GRCh38.ensembl)
View(GRCh38.ensembl)
listDatasets(hg38_ensembl)
getBM(attributes = c("hgnc_symbol","ensembl_gene_id"), filters = "hgnc_symbol", values = "RP4-669L17.2", mart = hg19_ensembl)
listFilters(hg19_ensembl, what = c("name", "description"))
a = listFilters(hg19_ensembl, what = c("name", "description"))
View(a)
getBM(attributes = c("hgnc_symbol","ensembl_gene_id", "external_gene_name"), filters = "external_gene_name", values = "RP4-669L17.2", mart = hg19_ensembl)
getBM(attributes = c("hgnc_symbol","ensembl_gene_id", "external_gene_name"), filters = "external_gene_name", values = "RP4-669L17.2", mart = hg38_ensembl)
RNARunSeurat()
RNARunSeurat
View(hg19_gene)
View(hg38_ensembl)
hg38_ensembl@dataset
View(GRCh38.ensembl)
length(unique(GRCh38.ensembl$Gene.name))
GRCh37.ensembl = read.table("~/Downloads/GRCh37_mart_export.txt")
GRCh37.ensembl = read.table("~/Downloads/GRCh37_mart_export.txt", sep = "\t")
View(GRCh37.ensembl)
GRCh37.ensembl = read.table("~/Downloads/GRCh37_mart_export.txt", sep = "\t", header = TRUE)
View(GRCh37.ensembl)
View(GRCh38.ensembl)
View(GRCh38.ensembl)
GRCh37_GRCh38 = merge(GRCh38.ensembl[, c("Gene.stable.ID","Gene.name")], GRCh37.ensembl[, c("Gene.stable.ID","Gene.name")], by = "Gene.stable.ID")
View(GRCh37_GRCh38)
GRCh37_GRCh38_unique = unique.data.frame(GRCh37_GRCh38)
View(GRCh37_GRCh38_unique)
GRCh37_GRCh38 = merge(GRCh37.ensembl[, c("Gene.stable.ID","Gene.name")], GRCh38.ensembl[, c("Gene.stable.ID","Gene.name")], by = "Gene.stable.ID")
GRCh37_GRCh38_unique = unique.data.frame(GRCh37_GRCh38)
View(GRCh37_GRCh38_unique)
View(GRCh38.ensembl)
colnames(GRCh37_GRCh38_unique)[2:3] = c("Gene.name.GRCh37","Gene.name.GRCh38")
View(GRCh37_GRCh38_unique)
match("AC004381.6", GRCh37_GRCh38_unique$Gene.name.GRCh38)
match("AC004381.6", GRCh37_GRCh38_unique$Gene.name.GRCh37)
match(GRCh37_GRCh38_unique$Gene.name.GRCh37, "AC004381.6")
match(c("AC004381.6", "SCYL3"), GRCh37_GRCh38_unique$Gene.name.GRCh37)
match(c("AC004381.6", "SCYL3", "tp53"), GRCh37_GRCh38_unique$Gene.name.GRCh37)
match(c("AC004381.6", "SCYL3", "TP53"), GRCh37_GRCh38_unique$Gene.name.GRCh37)
match(c("AC004381.6", "SCYL3", "TP53", "CD8"), GRCh37_GRCh38_unique$Gene.name.GRCh37)
GRCh37_GRCh38_unique[match(c("AC004381.6", "SCYL3", "TP53", "CD8"), GRCh37_GRCh38_unique$Gene.name.GRCh37),]
GRCh37_GRCh38_unique[na.omit(match(c("AC004381.6", "SCYL3", "TP53", "CD8"), GRCh37_GRCh38_unique$Gene.name.GRCh37)),]
GRCh38_gene = GRCh37_GRCh38_unique[na.omit(match(c("AC004381.6", "SCYL3", "TP53", "CD8"), GRCh37_GRCh38_unique$Gene.name.GRCh37)),"Gene.name.GRCh38"]
count_index = which((!duplicated(count_rowname)) & (!is.na(count_rowname)))
GRCh38_gene = GRCh37_GRCh38_unique[na.omit(match(c("AC004381.6", "SCYL3", "TP53", "CD8"), GRCh37_GRCh38_unique$Gene.name.GRCh37)),"Gene.name.GRCh38"]
count_index = which((!duplicated(GRCh38_gene)) & (!is.na(GRCh38_gene)))
count_index
NCBIM37.ensembl = read.table("~/Downloads/NCBIM37_mart_export.txt", sep = "\t", header = TRUE)
NCBIM37.ensembl
warnings()
library(MAESTRO)
data("human.immune.CIBERSORT")
force(human.immune.CIBERSORT)
setwd("~/Documents/Github/MAESTRO/")
setwd("~/Documents/Github/MAESTRO/")
load("data/human.immune.CIBERSORT.RData")
View(human.immune.CIBERSORT)
unique(human.immune.CIBERSORT[1,])
unique(human.immune.CIBERSORT[,1])
setwd("~/Documents/Github/MAESTRO/")
View(human.immune.CIBERSORT)
cd8 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "CD8Tcells",2]
naivecd4 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "NaiveCD4Tcells",2]
restmemcd4 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "RestMemCD4Tcells",2]
actmemcd4 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "ActMemCD4Tcells",2]
Tfh = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "Tfh",2]
Treg = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "Treg",2]
cd8 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "CD8Tcells",2]
naivecd4 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "NaiveCD4Tcells",2]
restmemcd4 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "RestMemCD4Tcells",2]
actmemcd4 = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "ActMemCD4Tcells",2]
Tfh = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "Tfh",2]
Treg = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "Treg",2]
intersect(cd8, naivecd4)
intersect(cd8, naivecd4,restmemcd4)
intersect(naivecd4,restmemcd4)
intersect(intersect(naivecd4,restmemcd4),actmemcd4)
intersect(intersect(intersect(naivecd4,restmemcd4),actmemcd4),Treg)
intersect(intersect(intersect(intersect(naivecd4,restmemcd4),actmemcd4),Treg),"Tfh")
intersect(intersect(intersect(intersect(naivecd4,restmemcd4),actmemcd4),Treg),Tfh)
intersect(intersect(intersect(intersect(intersect(naivecd4,restmemcd4),actmemcd4),Treg),Tfh), cd8)
intersect(cd8,naivecd4)
setwd("~/Documents/Github/MAESTRO/")
load("data/human.immune.CIBERSORT.RData")
human.immune.CIBERSORT = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "TMKI67",]
setwd("~/Documents/Github/MAESTRO/")
load("data/human.immune.CIBERSORT.RData")
human.immune.CIBERSORT = human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "TMKI67",]
human.immune.CIBERSORT = rbind(human.immune.CIBERSORT,
cbind("CD8Tex",unique(c(human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "CD8Tcells",2],"PDCD1","LAG3","CTLA4","TIGIT","HAVCR2"))),
cbind("TMKI67", c("BCL11B","CD2","CD247","CD27","CD28","CD3D","CD3E","CD3G",
"CD6","CD7","CD8A","CD8B","CD96","CXCR6","FLT3LG","FYN",
"GIMAP4","GPR171","GZMK","GZMM","ICOS","ITK","LCK","LIME1",
"PRKCH","PSTPIP1","SH2D1A","SIRPG","TNFRSF9","TRAC","TRAT1",
"TRBC1","TRBC2","UBASH3A","ZAP70",
"AURKA","BIRC5","BUB1","CCNA2","CCNB1","CDC20","CDK1","CDKN3","CDKN3","FEN1","HMGB2","MCM2","MCM5","MCM6","MYBL2","NUSAP1","PCNA","PLK1","TOP2A","ZWINT")))
save(human.immune.CIBERSORT, file = "data/human.immune.CIBERSORT.RData")
sort(unique(human.immune.CIBERSORT[,1]))
load("data/human.immune.CIBERSORT.RData")
human.immune.CIBERSORT[human.immune.CIBERSORT[,1] != "CD8Tcells",2]
human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "CD8Tcells",2]
View(human.immune.CIBERSORT)
unique(human.immune.CIBERSORT[1,])
unique(human.immune.CIBERSORT[,1])
human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "RestDCs",2]
human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "ActDCs",2]
setwd("~/Documents/Github/MAESTRO/")
load("data/human.immune.CIBERSORT.RData")
human.immune.CIBERSORT = rbind(human.immune.CIBERSORT,
cbind("RestpDCs", unique(c(setdiff(human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "RestDCs",2],c("CCL22", "CD209", "FLT3")),"CLEC4C","IRF7","LILRB4","Siglech"))),
cbind("ActpDCs", unique(c(setdiff(human.immune.CIBERSORT[human.immune.CIBERSORT[,1] == "ActDCs",2],c("CCL22", "CD209", "FLT3")),"CLEC4C","IRF7","LILRB4","Siglech"))))
save(human.immune.CIBERSORT, file = "data/human.immune.CIBERSORT.RData")
sort(unique(human.immune.CIBERSORT[,1]))
p2 = ElbowPlot(object = RNA.res$RNA, ndims = 50)
ggsave(file.path(paste0(RNA.res$RNA@project.name, "_PCElbowPlot.png")), p2,  width=10, height=4)
RNA.res$RNA@meta.data$assign.CIBERSORT = RNA.res$RNA@meta.data$assign.ident
RNA.res$RNA@meta.data$patient = as.character((RNA.res$RNA$orig.ident))
RNA.res$RNA@meta.data$assign.paper = RNA.res$RNA@meta.data$celltype_major
source('~/Library/Caches/Transmit/647DD50E-D89C-485F-94F9-0A690E2C9DE7/10.10.140.189/home1/wangchenfei/Project/TIRA/Data_cancer_0508/BRCA_GSE114727/BRCA_GSE114727_inDrop.R')
source('~/Library/Caches/Transmit/647DD50E-D89C-485F-94F9-0A690E2C9DE7/10.10.140.189/home1/wangchenfei/Project/TIRA/Data_cancer_0508/BRCA_GSE114727/BRCA_GSE114727_inDrop.R')
