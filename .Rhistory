scale_y_continuous(expand = c(0, 0)) +
ggplot(targetDf_top, aes(x = sample, y = giggle_score)) +
geom_bar(stat="identity", fill = RCB_blue) +
coord_flip() + xlab(NULL) + ylab("GIGGLE Score") +
ggtitle("Cluster 0") +
scale_y_log10() +
theme(plot.title = element_text(size = 14, hjust = 0.5),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, hjust = 0.5),
axis.ticks.y = element_blank(),
axis.line.y = element_blank())
ggplot(targetDf_top, aes(x = sample, y = giggle_score)) +
geom_bar(stat="identity", fill = RCB_blue) +
coord_flip() + xlab(NULL) + ylab("GIGGLE Score") +
ggtitle("Cluster 0") +
scale_y_log10() +
theme(plot.title = element_text(size = 14, hjust = 0.5),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, hjust = 0.5),
axis.ticks.y = element_blank(),
axis.line.y = element_blank())
ggplot(targetDf_top, aes(x = sample, y = giggle_score)) +
geom_bar(stat="identity", fill = RCB_blue) +
coord_flip() + xlab(NULL) + ylab("GIGGLE Score") +
ggtitle("Cluster 0") +
scale_y_continuous(expand = c(0, 0)) +
theme(plot.title = element_text(size = 14, hjust = 0.5),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, hjust = 0.5),
axis.ticks.y = element_blank(),
axis.line.y = element_blank())
setwd("~/Documents/Github/MAESTRO/")
devtools::document()
devtools::document()
PlotCoverageByGroup
setwd("Documents/Project/SingleCell/scATAC/Analysis/10X_PBMC_1k_0607/")
setwd("~/Documents/Project/SingleCell/scATAC/Analysis/10X_PBMC_1k_0607/")
png("MS4A1.png", units = "in", width = 6, height = 4, res = 300)
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 2000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
dev.off()
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 2000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
png("MS4A1.png", units = "in", width = 6, height = 4, res = 300)
par(mar = c(5, 3, 2, 3))
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
dev.off()
par(mar = c(5, 3, 2, 3))
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 0.9,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
png("MS4A1.png", units = "in", width = 6, height = 5, res = 300)
par(mar = c(5, 3, 2, 3))
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 0.9,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
dev.off()
png("MS4A1.png", units = "in", width = 6, height = 5, res = 300)
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 0.9,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
dev.off()
PlotCoverageByGroup(gene_name = "MS4A1", downstream = 8000,
yaxis_cex = 0.9,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "blue",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
PlotCoverageByGroup<- function(chrom = NULL, start = NULL, end =NULL, gene_name = NULL,
upstream = 2000, downstream = 2000, fragment = NULL,
bam = NULL,
cellbarcode_tag = "CB",
mapqFilter = 30,
grouping,
clusters_to_plot = NULL,
genome ='hg19',
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
eg.db = org.Hs.eg.db,
ymax = NULL, label_cex = 1, label_side = "left",
label.margin = 0.05,
yaxis_cex = 1, track_cols = "cadetblue2",
tick.dist = 10000, minor.tick.dist = 2000,
tick_label_cex = 1
){
######## read in the clustering information ##################
grouping<- readr::read_tsv(grouping)
if(! all(c("cell", "cluster", "depth") %in% colnames(grouping))) {
stop('Grouping dataframe must have cell, cluster, and depth columns.')
}
## get number of reads per group for normalization.
## not furthur normalize by the cell number in each group.
message("reading in the grouping/clustering information and calculate
a scaling factor for normalizing tracks based on 1e6/read depth")
grouping<-  grouping %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(cells_in_group = dplyr::n(), total_depth_in_group = sum(depth)) %>%
# reads per million (RPM)
dplyr::mutate(scaling_factor = 1e6/(total_depth_in_group)) %>%
dplyr::ungroup() %>%
dplyr::select(cell, cluster, scaling_factor)
if (!is.null(clusters_to_plot)){
if (any(!(clusters_to_plot %in% grouping$cluster))){
stop("clusters_to_plot should be in the grouping txt file")
}
if (length(track_cols) ==1){
track_cols<- rep(track_cols, length(clusters_to_plot))
} else if (length(clusters_to_plot) != length(track_cols)){
stop("the track_cols should be the same length as the clusters_to_plot")
}
} else {
total_number_clusters<- length(unique(grouping$cluster))
# if only one color is specified, all tracks will be plotted with the same color
if (length(track_cols) == 1){
track_cols<- rep(track_cols, total_number_clusters)
} else if (length(track_cols) != total_number_clusters) {
stop("track_cols should be of length 1 or the same length as the total number of clusters")
}
}
########## get a GenomicRanges for the gene and extend upstream and downstream ########
if (is.null(chrom) & is.null(start) & is.null(end) & !is.null(gene_name)){
gene <- addGeneNameToTxdb(txdb = txdb, eg.db = eg.db)
gr<- gene[which(gene$symbol == gene_name)]
if (length(gr) == 0){
stop("gene name is not found in the database")
} else if (length(gr) > 1) {
gr<- gr[1]
warning("multiple GRanges found for the gene, using the first one")
gr<- extend(gr, upstream = upstream, downstream = downstream)
} else {
gr<- extend(gr, upstream = upstream, downstream = downstream)
}
} else if (!is.null(chrom) & !is.null(start) & !is.null(end)){
gr<- GRanges(seq = chrom, IRanges(start = start, end = end ))
}
#### read in the fragment.tsv.gz with "chr", "start", "end", "cell", "duplicate" columns. output from cellranger-atac ###
#### or bam file with a CB tag for cell barcode ###############
#### if it is a bam file, need to read in as pairs of read ######
if (is.null(fragment) & !is.null(bam)) {
## read in only properly paired reads
message("reading in bam file and extracting reads")
flag<- Rsamtools::scanBamFlag(isProperPair =TRUE)
param <- Rsamtools::ScanBamParam(what=Rsamtools::scanBamWhat(), which= gr, tag= cellbarcode_tag, flag = flag, mapqFilter = 30)
# read in pairs as a list to retain meta columns
GA <- GenomicAlignments::readGAlignmentsList(file = bam, param=param, use.names =TRUE)
# this takes a bit longer than I want: ~1min
meta_cols<- Reduce("rbind", lapply(GA, function(x) mcols(x)[1,]))
meta_cols<- dplyr::left_join(as.data.frame(meta_cols), grouping, by =setNames("cell", cellbarcode_tag))
## same as: as(y, "GRanges)
grs<- GenomicRanges::granges(GA, ignore.strand =TRUE, use.mcols = TRUE)
grs$cell<- meta_cols[, cellbarcode_tag]
grs$cluster<- meta_cols[, "cluster"]
grs$scaling_factor<- meta_cols[, "scaling_factor"]
grs<- grs[!is.na(grs$cell)]
## use {plyranges} in the future
message("shifting reads +4bp and -5bp and removing PCR duplicates")
reads<- grs %>%
as.data.frame() %>%
dplyr::filter(!is.na(cluster)) %>%
dplyr::group_by(cell) %>%
## remove PCR duplicates.
dplyr::distinct(seqnames, start, end, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
### shift + strand 4bp and - strand -5 bp for the 9bp overhang from ATACseq
dplyr::mutate(start = start + 4, end = end -5) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = TRUE)
} else if (is.null(bam) & !is.null(fragment)){
message("reading in fragment.tsv and extracting reads, no need to shift reads")
reads<- Rsamtools::scanTabix(fragment, param = gr)
reads<- reads[[1]] %>%
tibble::enframe() %>%
dplyr::select(-name) %>%
tidyr::separate(value, into = c("chr", "start", "end", "cell", "duplicate"), sep = "\t") %>%
dplyr::mutate_at(.vars = c("start", "end"), as.numeric) %>%
# make it 1 based for R, the fragment.tsv is 0 based bed file
dplyr::mutate(start = start + 1) %>%
dplyr::inner_join(grouping) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = TRUE)
}
#####  plotting by krayoplotR ##############
message("plotting the tracks")
pp <- karyoploteR::getDefaultPlotParams(plot.type=1)
pp$leftmargin <- 0.15
pp$topmargin <- 15
pp$bottommargin <- 15
pp$ideogramheight <- 5
pp$data1inmargin <- 10
kp <- karyoploteR::plotKaryotype(genome = genome, zoom = gr, plot.params = pp)
kp<- karyoploteR::kpAddBaseNumbers(kp, tick.dist = tick.dist, minor.tick.dist = minor.tick.dist,
add.units = TRUE, cex= tick_label_cex, digits = 6)
## calculate the normalized coverage
normalized_coverage<- function(x){
#if (!is(x, "GRangesList"))
#  stop("'x' must be a GRangesList object")
# specify the width to the whole chromosome to incldue the 0s
cvgs<- lapply(x, function(x) GenomicRanges::coverage(x, width = kp$chromosome.lengths) * x$scaling_factor[1])
return(cvgs)
}
# drop seqlevels for not used chromosomes, otherwise coverage(x, width = kp$chromosome.lengths) not working
reads<- GenomeInfoDb::keepSeqlevels(reads, value = kp$chromosomes)
# GRangesList object by group/cluster
reads_by_group<- split(reads, reads$cluster)
#print(reads_by_group)
coverage_norm<- normalized_coverage(reads_by_group)
## calculate the max coverage if not specified
if (is.null(ymax)) {
yaxis_common<- ceiling(max(lapply(coverage_norm, max) %>% unlist()))
} else {
yaxis_common<- ymax
}
## add gene information
genes.data <- karyoploteR::makeGenesDataFromTxDb(txdb,
karyoplot=kp,
plot.transcripts = TRUE,
plot.transcripts.structure = TRUE)
genes.data <- karyoploteR::addGeneNames(genes.data)
genes.data <- karyoploteR::mergeTranscripts(genes.data)
kp<- karyoploteR::kpPlotGenes(kp, data=genes.data, r0=0, r1=0.05, gene.name.cex = 1)
## subsetting the clusters to plot and order as the user input
if (!is.null(clusters_to_plot)){
coverage_norm<- coverage_norm[clusters_to_plot]
}
for(i in seq_len(length(coverage_norm))) {
read <- coverage_norm[[i]]
at <- karyoploteR::autotrack(i, length(coverage_norm), r0=0.1, r1=1, margin = 0.1)
karyoploteR::kpPlotCoverage(kp, data=read,
r0=at$r0, r1=at$r1, col = track_cols[i], ymax = yaxis_common)
karyoploteR::kpAxis(kp, ymin=0, ymax=yaxis_common, numticks = 2, r0=at$r0, r1=at$r1, cex = yaxis_cex, labels = c("", yaxis_common))
karyoploteR::kpAddLabels(kp, side = label_side, labels = names(coverage_norm)[i], r0=at$r0, r1=at$r1,
cex=label_cex, label.margin = label.margin)
}
}
extend <- function(x, upstream=0, downstream=0)
{
if (any(strand(x) == "*"))
warning("'*' ranges were treated as '+'")
on_plus <- strand(x) == "+" | strand(x) == "*"
new_start <- start(x) - ifelse(on_plus, upstream, downstream)
new_end <- end(x) + ifelse(on_plus, downstream, upstream)
ranges(x) <- IRanges(new_start, new_end)
trim(x)
}
addGeneNameToTxdb<- function(txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
eg.db = org.Hs.eg.db){
gene<- GenomicFeatures::genes(txdb)
## 1: 1 mapping
ss<- AnnotationDbi::select(eg.db, keys = gene$gene_id,
keytype="ENTREZID", columns = "SYMBOL" )
gene$symbol<- ss[, 2]
return(gene)
}
PlotCoverageByGroup(gene_name = "CD8A", downstream = 2000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
MAESTROPlotCoverageByGroup<- function(chrom = NULL, start = NULL, end =NULL, gene_name = NULL,
upstream = 2000, downstream = 2000, fragment = NULL,
bam = NULL,
cellbarcode_tag = "CB",
mapqFilter = 30,
grouping,
clusters_to_plot = NULL,
genome ='hg19',
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
eg.db = org.Hs.eg.db,
ymax = NULL, label_cex = 1, label_side = "left",
label.margin = 0.05,
yaxis_cex = 1, track_cols = "cadetblue2",
tick.dist = 10000, minor.tick.dist = 2000,
tick_label_cex = 1
){
######## read in the clustering information ##################
grouping<- readr::read_tsv(grouping)
if(! all(c("cell", "cluster", "depth") %in% colnames(grouping))) {
stop('Grouping dataframe must have cell, cluster, and depth columns.')
}
## get number of reads per group for normalization.
## not furthur normalize by the cell number in each group.
message("reading in the grouping/clustering information and calculate
a scaling factor for normalizing tracks based on 1e6/read depth")
grouping<-  grouping %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(cells_in_group = dplyr::n(), total_depth_in_group = sum(depth)) %>%
# reads per million (RPM)
dplyr::mutate(scaling_factor = 1e6/(total_depth_in_group)) %>%
dplyr::ungroup() %>%
dplyr::select(cell, cluster, scaling_factor)
if (!is.null(clusters_to_plot)){
if (any(!(clusters_to_plot %in% grouping$cluster))){
stop("clusters_to_plot should be in the grouping txt file")
}
if (length(track_cols) ==1){
track_cols<- rep(track_cols, length(clusters_to_plot))
} else if (length(clusters_to_plot) != length(track_cols)){
stop("the track_cols should be the same length as the clusters_to_plot")
}
} else {
total_number_clusters<- length(unique(grouping$cluster))
# if only one color is specified, all tracks will be plotted with the same color
if (length(track_cols) == 1){
track_cols<- rep(track_cols, total_number_clusters)
} else if (length(track_cols) != total_number_clusters) {
stop("track_cols should be of length 1 or the same length as the total number of clusters")
}
}
########## get a GenomicRanges for the gene and extend upstream and downstream ########
if (is.null(chrom) & is.null(start) & is.null(end) & !is.null(gene_name)){
gene <- addGeneNameToTxdb(txdb = txdb, eg.db = eg.db)
gr<- gene[which(gene$symbol == gene_name)]
if (length(gr) == 0){
stop("gene name is not found in the database")
} else if (length(gr) > 1) {
gr<- gr[1]
warning("multiple GRanges found for the gene, using the first one")
gr<- extend(gr, upstream = upstream, downstream = downstream)
} else {
gr<- extend(gr, upstream = upstream, downstream = downstream)
}
} else if (!is.null(chrom) & !is.null(start) & !is.null(end)){
gr<- GRanges(seq = chrom, IRanges(start = start, end = end ))
}
#### read in the fragment.tsv.gz with "chr", "start", "end", "cell", "duplicate" columns. output from cellranger-atac ###
#### or bam file with a CB tag for cell barcode ###############
#### if it is a bam file, need to read in as pairs of read ######
if (is.null(fragment) & !is.null(bam)) {
## read in only properly paired reads
message("reading in bam file and extracting reads")
flag<- Rsamtools::scanBamFlag(isProperPair =TRUE)
param <- Rsamtools::ScanBamParam(what=Rsamtools::scanBamWhat(), which= gr, tag= cellbarcode_tag, flag = flag, mapqFilter = 30)
# read in pairs as a list to retain meta columns
GA <- GenomicAlignments::readGAlignmentsList(file = bam, param=param, use.names =TRUE)
# this takes a bit longer than I want: ~1min
meta_cols<- Reduce("rbind", lapply(GA, function(x) mcols(x)[1,]))
meta_cols<- dplyr::left_join(as.data.frame(meta_cols), grouping, by =setNames("cell", cellbarcode_tag))
## same as: as(y, "GRanges)
grs<- GenomicRanges::granges(GA, ignore.strand =TRUE, use.mcols = TRUE)
grs$cell<- meta_cols[, cellbarcode_tag]
grs$cluster<- meta_cols[, "cluster"]
grs$scaling_factor<- meta_cols[, "scaling_factor"]
grs<- grs[!is.na(grs$cell)]
## use {plyranges} in the future
message("shifting reads +4bp and -5bp and removing PCR duplicates")
reads<- grs %>%
as.data.frame() %>%
dplyr::filter(!is.na(cluster)) %>%
dplyr::group_by(cell) %>%
## remove PCR duplicates.
dplyr::distinct(seqnames, start, end, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
### shift + strand 4bp and - strand -5 bp for the 9bp overhang from ATACseq
dplyr::mutate(start = start + 4, end = end -5) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = TRUE)
} else if (is.null(bam) & !is.null(fragment)){
message("reading in fragment.tsv and extracting reads, no need to shift reads")
reads<- Rsamtools::scanTabix(fragment, param = gr)
reads<- reads[[1]] %>%
tibble::enframe() %>%
dplyr::select(-name) %>%
tidyr::separate(value, into = c("chr", "start", "end", "cell", "duplicate"), sep = "\t") %>%
dplyr::mutate_at(.vars = c("start", "end"), as.numeric) %>%
# make it 1 based for R, the fragment.tsv is 0 based bed file
dplyr::mutate(start = start + 1) %>%
dplyr::inner_join(grouping) %>%
GenomicRanges::makeGRangesFromDataFrame(keep.extra.columns = TRUE)
}
#####  plotting by krayoplotR ##############
message("plotting the tracks")
pp <- karyoploteR::getDefaultPlotParams(plot.type=1)
pp$leftmargin <- 0.15
pp$topmargin <- 15
pp$bottommargin <- 15
pp$ideogramheight <- 5
pp$data1inmargin <- 10
kp <- karyoploteR::plotKaryotype(genome = genome, zoom = gr, plot.params = pp)
kp<- karyoploteR::kpAddBaseNumbers(kp, tick.dist = tick.dist, minor.tick.dist = minor.tick.dist,
add.units = TRUE, cex= tick_label_cex, digits = 6)
## calculate the normalized coverage
normalized_coverage<- function(x){
#if (!is(x, "GRangesList"))
#  stop("'x' must be a GRangesList object")
# specify the width to the whole chromosome to incldue the 0s
cvgs<- lapply(x, function(x) GenomicRanges::coverage(x, width = kp$chromosome.lengths) * x$scaling_factor[1])
return(cvgs)
}
# drop seqlevels for not used chromosomes, otherwise coverage(x, width = kp$chromosome.lengths) not working
reads<- GenomeInfoDb::keepSeqlevels(reads, value = kp$chromosomes)
# GRangesList object by group/cluster
reads_by_group<- split(reads, reads$cluster)
#print(reads_by_group)
coverage_norm<- normalized_coverage(reads_by_group)
## calculate the max coverage if not specified
if (is.null(ymax)) {
yaxis_common<- ceiling(max(lapply(coverage_norm, max) %>% unlist()))
} else {
yaxis_common<- ymax
}
## add gene information
genes.data <- karyoploteR::makeGenesDataFromTxDb(txdb,
karyoplot=kp,
plot.transcripts = TRUE,
plot.transcripts.structure = TRUE)
genes.data <- karyoploteR::addGeneNames(genes.data)
genes.data <- karyoploteR::mergeTranscripts(genes.data)
kp<- karyoploteR::kpPlotGenes(kp, data=genes.data, r0=0, r1=0.05, gene.name.cex = 1)
## subsetting the clusters to plot and order as the user input
if (!is.null(clusters_to_plot)){
coverage_norm<- coverage_norm[clusters_to_plot]
}
for(i in seq_len(length(coverage_norm))) {
read <- coverage_norm[[i]]
at <- karyoploteR::autotrack(i, length(coverage_norm), r0=0.1, r1=1, margin = 0.1)
karyoploteR::kpPlotCoverage(kp, data=read,
r0=at$r0, r1=at$r1, col = track_cols[i], ymax = yaxis_common)
karyoploteR::kpAxis(kp, ymin=0, ymax=yaxis_common, numticks = 2, r0=at$r0, r1=at$r1, cex = yaxis_cex, labels = c("", yaxis_common))
karyoploteR::kpAddLabels(kp, side = label_side, labels = names(coverage_norm)[i], r0=at$r0, r1=at$r1,
cex=label_cex, label.margin = label.margin)
}
}
MAESTROPlotCoverageByGroup(gene_name = "CD8A", downstream = 2000,
yaxis_cex = 1,
fragment = "fragments_corrected_count.tsv.gz",
grouping = "grouping.txt",
tick_label_cex = 1, tick.dist = 5000,
track_cols = "red",
label_cex = 1,
minor.tick.dist = 1000, label.margin = -0.6,
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene,
genome = "hg38")
setwd("~/Documents/Github/MAESTRO/")
devtools::document()
devtools::document()
library(usethis)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
